{"version":3,"sources":["components/ModalOverlay/styles.ts","components/ModalOverlay/ModalOverlay.tsx","pages/AssetDetails/components/CardPriceInfoForModal/styles.ts","pages/AssetDetails/components/CardPriceInfoForModal/CardPriceInfoForModal.tsx","pages/AssetDetails/BuyCardModal/styles.ts","pages/AssetDetails/BuyCardModal/BuyCardModal.tsx","pages/AssetDetails/SellCardModal/styles.ts","pages/AssetDetails/SellCardModal/SellCardModal.tsx","pages/AssetDetails/AssetDetails.tsx"],"names":["StyledModalOverlay","styled","div","StyledModal","StyledCloseModalButton","button","StyledCloseButtonIcon","img","ModalOverlay","children","onClose","modalRef","useRef","useOutsideClick","ref","onClick","src","CloseIcon","alt","StyledCardPriceInfoContainer","StyledCardImg","StyledInfo","StyledInfoLabel","p","StyledInfoValue","CardPriceInfoForModal","cardImg","address","mint","price","slice","length","StyledBuyCardModalContent","StyledModalHeader","h3","theme","font","weight","regular","StyledInfoText","StyledButtonGroup","StyledBuyButton","StyledCancelButton","BuyCardModal","StyledSellCardModalContent","StyledInputGroup","StyledPriceLabel","StyledPriceInput","input","StyledSetPriceButton","SellCardModal","useState","setAmount","type","step","onChange","event","Number","currentTarget","value","AssetDetails","params","useParams","explorer","getChainExplorer","network","wasActiveProfile","useSelector","state","userData","me","activeUser","selectUserById","asset","selectCardById","add","owner","ownerStatus","status","cardError","cards","error","cardStatus","marketsStatus","metaDataStatus","currentIndex","setCurrentIndex","openBuyModal","setOpenBuyModal","openSellModal","setOpenSellModal","ownedTokenIds","useMemo","ownedAssets","find","item","assetAddress","toLowerCase","tokenIds","dispatch","useAppDispatch","STATUS","LOADING","fetchProfileByAddress","FAILED","fetchAllMarkets","id","ls8MetaData","fetchMetaDataForTokenId","tokenId","toString","useEffect","fetchCard","window","scrollTo","propertiesImages","Tier","TierPropertyIcon","Edition","EditionPropertyIcon","CategoryPropertyIcon","SetPropertyIcon","Season","SeasonPropertyIcon","Zone","ZonePropertyIcon","League","SubzonePropertyIcon","Team","TeamPropertyIcon","cardProperties","label","tier","icon","edition","editionCategory","editionSet","season","zoneLabel","leagueLabel","teamLabel","marketsForOwnedTokens","markets","filter","some","i","currentMintMarket","urlTokenIdMarket","cardInfo","valueType","totalSupply","renderCardPrice","WethIcon","minimumAmount","toNumber","renderCardProperties","attributes","map","trait_type","color","image","href","exploreUrl","target","rel","previousIndex","BackwardsIcon","nextIndex","ForwardsIcon","ReloadIcon","ShareIcon","OptionIcon","title","enableToggle"],"mappings":"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","file":"static/js/5.fab8fe8b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  display: flex;\n  z-index: 9999;\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nexport const StyledModal = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  border-radius: 10px;\n  background-color: rgba(49, 49, 49, 1);\n  border: 1px solid rgba(170, 170, 170, 1);\n  margin: auto;\n  padding: 1.5em 1em;\n  width: 100%;\n  max-width: 25em;\n`;\n\nexport const StyledCloseModalButton = styled.button`\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 1em 1em 0 0;\n`;\n\nexport const StyledCloseButtonIcon = styled.img``;\n","import React, { ReactNode, useRef } from 'react';\nimport { CloseIcon } from '../../assets';\nimport { useOutsideClick } from '../../hooks/useOutsideClick';\nimport {\n  StyledCloseButtonIcon,\n  StyledCloseModalButton,\n  StyledModal,\n  StyledModalOverlay,\n} from './styles';\n\ninterface IProps {\n  children: ReactNode;\n  onClose: () => void;\n}\n\nexport const ModalOverlay: React.FC<IProps> = ({ children, onClose }) => {\n  const modalRef = useRef(null);\n  useOutsideClick(modalRef, onClose);\n  return (\n    <StyledModalOverlay>\n      <StyledModal ref={modalRef}>\n        <StyledCloseModalButton onClick={onClose}>\n          <StyledCloseButtonIcon src={CloseIcon} alt=\"\" />\n        </StyledCloseModalButton>\n        {children}\n      </StyledModal>\n    </StyledModalOverlay>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledCardPriceInfoContainer = styled.div`\n  display: flex;\n  column-gap: 1em;\n  width: 100%;\n`;\n\nexport const StyledCardImg = styled.img`\n  max-width: 5em;\n`;\n\nexport const StyledInfo = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 5em auto;\n`;\n\nexport const StyledInfoLabel = styled.p`\n  color: rgba(255, 255, 255, 0.5);\n  font-size: 0.9rem;\n`;\n\nexport const StyledInfoValue = styled.p`\n  font-size: 0.9rem;\n`;\n","import React from 'react';\nimport {\n  StyledCardImg,\n  StyledCardPriceInfoContainer,\n  StyledInfo,\n  StyledInfoLabel,\n  StyledInfoValue,\n} from './styles';\n\ninterface IProps {\n  cardImg: string;\n  address: string;\n  mint?: number;\n  price?: number;\n}\n\nexport const CardPriceInfoForModal = ({\n  cardImg,\n  address,\n  mint,\n  price,\n}: IProps) => {\n  return (\n    <StyledCardPriceInfoContainer>\n      <StyledCardImg src={cardImg} alt=\"\" />\n      <StyledInfo>\n        <StyledInfoLabel>Address:</StyledInfoLabel>\n        <StyledInfoValue>\n          {address.slice(0, 8)}...\n          {address.slice(address.length - 4, address.length)}\n        </StyledInfoValue>\n        <StyledInfoLabel>Mint:</StyledInfoLabel>\n        <StyledInfoValue>{mint}</StyledInfoValue>\n        <StyledInfoLabel>Price:</StyledInfoLabel>\n        <StyledInfoValue>{price}</StyledInfoValue>\n      </StyledInfo>\n    </StyledCardPriceInfoContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledBuyCardModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 500px;\n  row-gap: 2em;\n`;\n\nexport const StyledModalHeader = styled.h3`\n  text-align: center;\n  font-weight: ${({ theme }) => theme.font.weight.regular};\n  font-size: 1.2rem;\n`;\n\nexport const StyledInfoText = styled.p`\n  font-size: 0.9rem;\n`;\n\nexport const StyledButtonGroup = styled.div``;\n\nexport const StyledBuyButton = styled.button`\n  background-color: rgba(255, 129, 1, 1);\n  border-radius: 0.2em;\n  color: white;\n  width: 100%;\n  padding: 0.5em 0;\n`;\n\nexport const StyledCancelButton = styled(StyledBuyButton)`\n  background-color: rgba(76, 76, 76, 1);\n  margin-top: 0.8em;\n`;\n","import { ModalOverlay } from '../../../components/ModalOverlay';\nimport { ICard } from '../../../services/models';\nimport { CardPriceInfoForModal } from '../components/CardPriceInfoForModal';\nimport {\n  StyledButtonGroup,\n  StyledBuyButton,\n  StyledBuyCardModalContent,\n  StyledCancelButton,\n  StyledInfoText,\n  StyledModalHeader,\n} from './styles';\n\ninterface IProps {\n  onClose: () => void;\n  address: string;\n  mint: number;\n  price?: number;\n  cardImg: string;\n}\n\nexport const BuyCardModal = ({\n  address,\n  onClose,\n  mint,\n  price,\n  cardImg,\n}: IProps) => {\n  return (\n    <ModalOverlay onClose={onClose}>\n      <StyledBuyCardModalContent>\n        <StyledModalHeader>BUY CARD</StyledModalHeader>\n        <CardPriceInfoForModal\n          address={address}\n          mint={mint}\n          price={price}\n          cardImg={cardImg}\n        />\n        <StyledInfoText>\n          Do you confirm the purchase of this card mint for xxx WETH?\n        </StyledInfoText>\n        <StyledButtonGroup>\n          <StyledBuyButton>Buy</StyledBuyButton>\n          <StyledCancelButton onClick={onClose}>Cancel</StyledCancelButton>\n        </StyledButtonGroup>\n      </StyledBuyCardModalContent>\n    </ModalOverlay>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledSellCardModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 500px;\n  row-gap: 2em;\n`;\n\nexport const StyledModalHeader = styled.h3`\n  text-align: center;\n  font-weight: ${({ theme }) => theme.font.weight.regular};\n  font-size: 1.2rem;\n`;\n\nexport const StyledInputGroup = styled.div`\n  position: relative;\n`;\n\nexport const StyledPriceLabel = styled.p`\n  position: absolute;\n  padding: 0 0.5em;\n  margin: -0.75em 0 0 0.5em;\n  background-color: rgba(49, 49, 49, 1);\n  font-size: 0.9rem;\n  color: rgba(255, 255, 255, 0.6);\n`;\n\nexport const StyledPriceInput = styled.input`\n  background: transparent;\n  color: white;\n  border: 1px solid rgba(153, 153, 153, 1);\n  border-radius: 0.3em;\n  padding: 0.5em 0.5em;\n  text-align: end;\n  width: 100%;\n`;\n\nexport const StyledButtonGroup = styled.div``;\n\nexport const StyledSetPriceButton = styled.button`\n  background-color: rgba(255, 129, 1, 1);\n  border-radius: 0.2em;\n  color: white;\n  width: 100%;\n  padding: 0.5em 0;\n`;\n\nexport const StyledCancelButton = styled(StyledSetPriceButton)`\n  background-color: rgba(76, 76, 76, 1);\n  margin-top: 0.8em;\n`;\n","import React, { useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useSigner } from 'wagmi';\nimport { NetworkName } from '../../../boot/types';\nimport { ModalOverlay } from '../../../components/ModalOverlay';\n// import { KeyManagerApi } from '../../../services/controllers/KeyManager';\n// import { LSP4DigitalAssetApi } from '../../../services/controllers/LSP4DigitalAsset';\nimport { CardPriceInfoForModal } from '../components/CardPriceInfoForModal';\nimport {\n  StyledButtonGroup,\n  StyledCancelButton,\n  StyledInputGroup,\n  StyledModalHeader,\n  StyledPriceInput,\n  StyledPriceLabel,\n  StyledSellCardModalContent,\n  StyledSetPriceButton,\n} from './styles';\n\ninterface IProps {\n  onClose: () => void;\n  address: string;\n  mint: number;\n  price?: number;\n  cardImg: string;\n}\n\ninterface IParams {\n  add: string;\n  network: NetworkName;\n  id: string;\n}\n\nexport const SellCardModal = ({\n  address,\n  onClose,\n  mint,\n  price,\n  cardImg,\n}: IProps) => {\n  //   const params = useParams<IParams>();\n  const [amount, setAmount] = useState<number>(0);\n  //   const [{ data: signer }] = useSigner();\n\n  //   const whiteListedTokenAddress = {\n  //     l14: '',\n  //     mumbai: '0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa',\n  //     ethereum: '',\n  //     polygon: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  //   };\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(Number(event.currentTarget.value));\n  };\n\n  //   const setCardForSale = async () => {\n  //     if (profile.isOwnerKeyManager) {\n  //       await KeyManagerApi.setCardMarketViaKeyManager(\n  //         params.add,\n  //         profile.address,\n  //         profile.owner,\n  //         Number(params.id),\n  //         whiteListedTokenAddress[params.network],\n  //         amount,\n  //         signer,\n  //       );\n  //     } else {\n  //       await LSP4DigitalAssetApi.sellCard(\n  //         address,\n  //         Number(mint),\n  //         whiteListedTokenAddress[params.network],\n  //         amount,\n  //         params.network,\n  //       );\n  //     }\n  //   };\n\n  return (\n    <ModalOverlay onClose={onClose}>\n      <StyledSellCardModalContent>\n        <StyledModalHeader>SET CARD FOR SALE</StyledModalHeader>\n        <CardPriceInfoForModal\n          address={address}\n          mint={mint}\n          price={price}\n          cardImg={cardImg}\n        />\n        <StyledInputGroup>\n          <StyledPriceLabel>Your price</StyledPriceLabel>\n          <StyledPriceInput type=\"number\" step=\"any\" onChange={changeHandler} />\n        </StyledInputGroup>\n\n        <StyledButtonGroup>\n          <StyledSetPriceButton>Set for sale</StyledSetPriceButton>\n          <StyledCancelButton onClick={onClose}>Cancel</StyledCancelButton>\n        </StyledButtonGroup>\n      </StyledSellCardModalContent>\n    </ModalOverlay>\n  );\n};\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  BackwardsIcon,\n  CategoryPropertyIcon,\n  EditionPropertyIcon,\n  ForwardsIcon,\n  OptionIcon,\n  ReloadIcon,\n  SeasonPropertyIcon,\n  SetPropertyIcon,\n  ShareIcon,\n  SubzonePropertyIcon,\n  TeamPropertyIcon,\n  TierPropertyIcon,\n  WethIcon,\n  ZonePropertyIcon,\n} from '../../assets';\nimport { useSelector } from 'react-redux';\nimport { NetworkName, RootState } from '../../boot/types';\nimport {\n  fetchAllMarkets,\n  fetchCard,\n  fetchMetaDataForTokenId,\n  selectCardById,\n} from '../../features/cards';\nimport { useEffect } from 'react';\nimport { fetchProfileByAddress, selectUserById } from '../../features/profiles';\nimport { useMemo } from 'react';\nimport {\n  StyledAssetDetailContent,\n  StyledCardError,\n  StyledLoader,\n  StyledLoadingHolder,\n  StyledAssetDetailsContentWrapper,\n  StyledCardInfoWrapper,\n  StyledCardPriceWrapper,\n  StyledCardInfo,\n  StyledCardMainDetails,\n  StyledMedia,\n  StyledMediaWrapper,\n  StyledCardPriceWrapperHeader,\n  StyledCardPriceLabel,\n  StyledQuickActions,\n  StyledReloadPriceAction,\n  StyledActionIcon,\n  StyledCardPriceValue,\n  StyledCardPriceValueWrapper,\n  StyledTokenIcon,\n  StyledActionsButtonWrapper,\n  StyledBuyButton,\n  StyledMakeOfferButton,\n  StyledCardInfoContainer,\n  StyledCardInfoLabel,\n  StyledCardInfoValue,\n  StyledCardInfoAccordion,\n  StyledCardPropertiesAccordion,\n  StyledCardProperties,\n  StyledCardPropertyIconWrapper,\n  StyledCardPropertyContainer,\n  StyledCardPropertyIcon,\n  StyledCardProperty,\n  StyledCardPropertyLabel,\n  StyledCardPropertyValue,\n  StyledHoldersAccordion,\n  StyledMarketAccordion,\n  StyledMintControls,\n  StyledMintSkipButton,\n  StyledMintSkipButtonImg,\n  StyledExplorerIcon,\n  StyledMintSliderIndex,\n  StyledChangePriceButton,\n  StyledWithdrawButton,\n  StyledSetPriceButton,\n} from './styles';\nimport { useAppDispatch } from '../../boot/store';\nimport { getChainExplorer, STATUS } from '../../utility';\nimport { BuyCardModal } from './BuyCardModal';\nimport { SellCardModal } from './SellCardModal';\n// import ReactTooltip from 'react-tooltip';\n// import { LSP4DigitalAssetApi } from '../../services/controllers/LSP4DigitalAsset';\n// import { useSigner } from 'wagmi';\n// import { Accordion } from '../../components/Accordion';\n// import { HolderPagination } from './HoldersPagination';\n\ninterface IPrams {\n  add: string;\n  network: NetworkName;\n  id: string;\n}\n\nconst AssetDetails: React.FC = () => {\n  const params = useParams<IPrams>();\n\n  const explorer = getChainExplorer(params.network);\n\n  const wasActiveProfile = useSelector((state: RootState) => state.userData.me);\n\n  const activeUser = useSelector(\n    (state: RootState) =>\n      wasActiveProfile &&\n      selectUserById(state.userData[params.network], wasActiveProfile),\n  );\n\n  // const profiles = useSelector((state: RootState) =>\n  //   selectUserIds(state.userData[params.network]),\n  // );\n\n  const asset = useSelector((state: RootState) =>\n    selectCardById(state, params.add),\n  );\n\n  const owner = useSelector((state: RootState) =>\n    selectUserById(\n      state.userData[params.network],\n      asset?.owner ? asset.owner : '',\n    ),\n  );\n\n  const ownerStatus = useSelector(\n    (state: RootState) => state.userData[params.network].status,\n  );\n\n  // const creators = useSelector((state: RootState) =>\n  //   selectAllUsersItems(state.userData[params.network]),\n  // )?.filter((item) => {\n  //   return asset?.creators.some((i) => {\n  //     return i === item.address && item.network === params.network;\n  //   });\n  // });\n\n  const cardError = useSelector((state: RootState) => state.cards.error);\n\n  const cardStatus = useSelector((state: RootState) => state.cards.status);\n\n  const marketsStatus = useSelector(\n    (state: RootState) => state.cards.marketsStatus,\n  );\n\n  const metaDataStatus = useSelector(\n    (state: RootState) => state.cards.metaDataStatus,\n  );\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [openBuyModal, setOpenBuyModal] = useState<boolean>(false);\n  const [openSellModal, setOpenSellModal] = useState<boolean>(false);\n\n  const ownedTokenIds = useMemo(\n    () =>\n      activeUser &&\n      activeUser.ownedAssets.find(\n        (item) => item.assetAddress.toLowerCase() === params.add.toLowerCase(),\n      )?.tokenIds,\n    [activeUser, params.add],\n  );\n\n  const dispatch = useAppDispatch();\n\n  // const tokenIdForSale = useMemo(\n  //   async () =>\n  //     params.id &&\n  //     (await LSP4DigitalAssetApi.getTokenSale(\n  //       params.add,\n  //       Number(params.id),\n  //       params.network,\n  //     )),\n  //   [params.add, params.network, params.id],\n  // );\n\n  useMemo(() => {\n    if (!asset || owner || ownerStatus === STATUS.LOADING) return;\n\n    dispatch(\n      fetchProfileByAddress({\n        address: asset.owner,\n        network: params.network,\n      }),\n    );\n  }, [asset, dispatch, owner, ownerStatus, params.network]);\n\n  //getAllMarkets\n  useMemo(() => {\n    if (\n      !asset ||\n      marketsStatus === STATUS.LOADING ||\n      marketsStatus === STATUS.FAILED\n    )\n      return;\n\n    dispatch(\n      fetchAllMarkets({ assetAddress: params.add, network: params.network }),\n    );\n  }, [asset, dispatch, marketsStatus, params.add, params.network]);\n\n  useMemo(() => {\n    if (\n      !asset ||\n      !params.id ||\n      `${params.id}` in asset.ls8MetaData ||\n      metaDataStatus === STATUS.LOADING\n    )\n      return;\n    dispatch(\n      fetchMetaDataForTokenId({\n        assetAddress: params.add,\n        network: params.network,\n        tokenId: params.id,\n      }),\n    );\n  }, [asset, dispatch, metaDataStatus, params.add, params.id, params.network]);\n\n  useMemo(() => {\n    if (\n      !params.id &&\n      wasActiveProfile &&\n      ownedTokenIds &&\n      ownedTokenIds.length > 0 &&\n      asset &&\n      !(`${ownedTokenIds[currentIndex].toString()}` in asset.ls8MetaData) &&\n      metaDataStatus !== STATUS.LOADING\n    ) {\n      dispatch(\n        fetchMetaDataForTokenId({\n          assetAddress: params.add,\n          network: params.network,\n          tokenId: ownedTokenIds[currentIndex],\n        }),\n      );\n    }\n  }, [\n    asset,\n    currentIndex,\n    dispatch,\n    metaDataStatus,\n    ownedTokenIds,\n    params.add,\n    params.id,\n    params.network,\n    wasActiveProfile,\n  ]);\n\n  // useMemo(() => {\n  //   let addresses: string[] = [];\n  //   asset?.holders.forEach((item) => {\n  //     if (!profiles?.includes(item)) {\n  //       addresses.push(item);\n  //     }\n  //   });\n  //   if (addresses.length > 0) {\n  //     dispatch(\n  //       fetchAssetHolders({ address: addresses, network: params.network }),\n  //     );\n  //   }\n  // }, [asset?.holders, dispatch, params.network, profiles]);\n\n  // useMemo(() => {\n  //   let addresses: string[] = [];\n  //   asset?.creators.forEach((item) => {\n  //     if (!profiles?.includes(item)) {\n  //       addresses.push(item);\n  //     }\n  //   });\n  //   if (addresses.length > 0) {\n  //     dispatch(\n  //       fetchAssetCreator({ address: addresses, network: params.network }),\n  //     );\n  //   }\n  // }, [asset?.creators, dispatch, params.network, profiles]);\n\n  useEffect(() => {\n    if (!asset && cardStatus !== STATUS.LOADING) {\n      dispatch(fetchCard({ address: params.add, network: params.network }));\n    }\n    window.scrollTo(0, 0);\n  }, [asset, cardStatus, dispatch, params.add, params.network]);\n\n  const propertiesImages: { [key: string]: string } = useMemo(\n    () => ({\n      Tier: TierPropertyIcon,\n      Edition: EditionPropertyIcon,\n      'Edition Category': CategoryPropertyIcon,\n      'Edition Set': SetPropertyIcon,\n      Season: SeasonPropertyIcon,\n      Zone: ZonePropertyIcon,\n      League: SubzonePropertyIcon,\n      Team: TeamPropertyIcon,\n    }),\n    [],\n  );\n\n  const cardProperties = useMemo(\n    () => [\n      {\n        label: 'Tier',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.tier,\n        icon: TierPropertyIcon,\n      },\n      {\n        label: 'Edition',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.edition,\n        icon: EditionPropertyIcon,\n      },\n      {\n        label: 'Category',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.editionCategory,\n        icon: CategoryPropertyIcon,\n      },\n      {\n        label: 'Set',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.editionSet,\n        icon: SetPropertyIcon,\n      },\n      {\n        label: 'Season',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.season,\n        icon: SeasonPropertyIcon,\n      },\n      {\n        label: 'Zone',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.zoneLabel,\n        icon: ZonePropertyIcon,\n      },\n      {\n        label: 'League',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.leagueLabel,\n        icon: SubzonePropertyIcon,\n      },\n      {\n        label: 'Team',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.teamLabel,\n        icon: TeamPropertyIcon,\n      },\n    ],\n    [asset, currentIndex, ownedTokenIds],\n  );\n\n  const marketsForOwnedTokens = useMemo(\n    () =>\n      ownedTokenIds &&\n      asset?.markets.filter((item) => {\n        return ownedTokenIds.some((i) => {\n          return i === Number(item.tokenId);\n        });\n      }),\n    [asset?.markets, ownedTokenIds],\n  );\n\n  const currentMintMarket = useMemo(\n    () =>\n      marketsForOwnedTokens &&\n      ownedTokenIds &&\n      marketsForOwnedTokens.find(\n        (item) => Number(item.tokenId) === ownedTokenIds[currentIndex],\n      ),\n    [currentIndex, marketsForOwnedTokens, ownedTokenIds],\n  );\n\n  const urlTokenIdMarket = useMemo(\n    () =>\n      asset?.markets.find((item) => Number(item.tokenId) === Number(params.id)),\n    [asset?.markets, params.id],\n  );\n\n  const cardInfo: {\n    label: string;\n    value: string;\n    valueType?: string;\n  }[] = [\n    {\n      label: 'Contract Address',\n      value: asset ? asset.address : '',\n      valueType: 'address',\n    },\n    {\n      label: 'Mint',\n      value: ownedTokenIds ? ownedTokenIds[currentIndex].toString() : '',\n    },\n    {\n      label: 'Total amount of Tokens',\n      value: asset ? asset.totalSupply.toString() : '',\n    },\n    { label: 'Token Standard', value: '' },\n    { label: 'Network', value: asset ? asset.network : '' },\n    { label: 'Score', value: '' },\n    {\n      label: 'Current owner',\n      value: wasActiveProfile ? wasActiveProfile : '',\n      valueType: 'address',\n    },\n  ];\n\n  const nextMint = () => {\n    const nextIndex = currentIndex + 1;\n    if (!ownedTokenIds || nextIndex >= ownedTokenIds.length) return;\n    setCurrentIndex(nextIndex);\n  };\n\n  const previousMint = () => {\n    const previousIndex = currentIndex - 1;\n    if (!ownedTokenIds || previousIndex < 0) return;\n    setCurrentIndex(previousIndex);\n  };\n\n  // const renderOwner = useMemo(() => {\n  //   if (asset?.address === params.add) {\n  //     if (owner?.address === asset.owner) {\n  //       const findBalanceOf = owner.ownedAssets.find(\n  //         (item) => item.assetAddress === params.add.toLowerCase(),\n  //       );\n  //       return (\n  //         <React.Fragment key={owner.address}>\n  //           <ProfileCard\n  //             userProfile={owner}\n  //             balance={findBalanceOf?.balance ? findBalanceOf.balance : 0}\n  //             type=\"owner\"\n  //             tooltipId=\"ownerTooltip\"\n  //           />\n  //           <ReactTooltip\n  //             id=\"ownerTooltip\"\n  //             getContent={(dataTip) => <span>Token Ids: {dataTip}</span>}\n  //           ></ReactTooltip>\n  //         </React.Fragment>\n  //       );\n  //     }\n  //   }\n  // }, [asset?.address, asset?.owner, params.add, owner]);\n\n  // const renderDesigners = useMemo(\n  //   () =>\n  //     creators?.map((creator: IProfile) => {\n  //       const findBalanceOf = creator.ownedAssets.find(\n  //         (item) => item.assetAddress === params.add.toLowerCase(),\n  //       );\n  //       return (\n  //         <React.Fragment key={creator.address}>\n  //           <ProfileCard\n  //             userProfile={creator}\n  //             balance={findBalanceOf?.balance ? findBalanceOf.balance : 0}\n  //             type=\"creator\"\n  //             tooltipId=\"designerTooltip\"\n  //           />\n  //           <ReactTooltip\n  //             id=\"designerTooltip\"\n  //             getContent={(dataTip) => <span>Token Ids: {dataTip}</span>}\n  //           ></ReactTooltip>\n  //         </React.Fragment>\n  //       );\n  //     }),\n  //   [creators, params.add],\n  // );\n\n  // const renderHolderPagination = useMemo(\n  //   () => <HolderPagination holdersAddresses={asset ? asset.holders : []} />,\n  //   [asset],\n  // );\n\n  const renderCardPrice = useMemo(() => {\n    if (urlTokenIdMarket && params.id) {\n      return (\n        <>\n          <StyledCardPriceValueWrapper>\n            <StyledTokenIcon src={WethIcon} alt=\"\" />\n            <StyledCardPriceValue>\n              {urlTokenIdMarket.minimumAmount.toNumber()}\n            </StyledCardPriceValue>\n          </StyledCardPriceValueWrapper>\n          <StyledActionsButtonWrapper>\n            <StyledBuyButton onClick={() => setOpenBuyModal(!openBuyModal)}>\n              Buy now\n            </StyledBuyButton>\n            <StyledMakeOfferButton>Make offer</StyledMakeOfferButton>\n          </StyledActionsButtonWrapper>\n        </>\n      );\n    }\n\n    if (!currentMintMarket && ownedTokenIds) {\n      return (\n        <>\n          <StyledCardPriceValueWrapper>\n            <StyledTokenIcon src={WethIcon} alt=\"\" />\n            <StyledCardPriceValue>-</StyledCardPriceValue>\n          </StyledCardPriceValueWrapper>\n          <StyledActionsButtonWrapper>\n            <StyledSetPriceButton\n              onClick={() => setOpenSellModal(!openSellModal)}\n            >\n              Set price\n            </StyledSetPriceButton>\n          </StyledActionsButtonWrapper>\n        </>\n      );\n    }\n    if (currentMintMarket && ownedTokenIds) {\n      return (\n        <>\n          <StyledCardPriceValueWrapper>\n            <StyledTokenIcon src={WethIcon} alt=\"\" />\n            <StyledCardPriceValue>\n              {currentMintMarket.minimumAmount.toNumber()}\n            </StyledCardPriceValue>\n          </StyledCardPriceValueWrapper>\n          <StyledActionsButtonWrapper>\n            <StyledChangePriceButton\n              onClick={() => setOpenSellModal(!openSellModal)}\n            >\n              Change price\n            </StyledChangePriceButton>\n            <StyledWithdrawButton>Withdraw from sale</StyledWithdrawButton>\n          </StyledActionsButtonWrapper>\n        </>\n      );\n    }\n  }, [\n    currentMintMarket,\n    openBuyModal,\n    openSellModal,\n    ownedTokenIds,\n    params.id,\n    urlTokenIdMarket,\n  ]);\n\n  const renderCardProperties = useMemo(() => {\n    if (\n      asset &&\n      asset.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n        ?.attributes &&\n      asset.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n        .attributes.length > 0\n    ) {\n      return asset?.ls8MetaData[\n        ownedTokenIds ? ownedTokenIds[currentIndex] : 0\n      ].attributes.map((item) => {\n        if ('trait_type' in item) {\n          return (\n            <StyledCardPropertyContainer key={item.trait_type}>\n              <StyledCardPropertyIconWrapper>\n                <StyledCardPropertyIcon\n                  src={propertiesImages[item.trait_type]}\n                  alt=\"\"\n                />\n              </StyledCardPropertyIconWrapper>\n              <StyledCardProperty>\n                <StyledCardPropertyLabel>\n                  {item.trait_type}\n                </StyledCardPropertyLabel>\n                <StyledCardPropertyValue>{item.value}</StyledCardPropertyValue>\n              </StyledCardProperty>\n            </StyledCardPropertyContainer>\n          );\n        }\n        return null;\n      });\n    } else {\n      return cardProperties.map((item) => (\n        <StyledCardPropertyContainer key={item.label}>\n          <StyledCardPropertyIconWrapper>\n            <StyledCardPropertyIcon src={item.icon} alt=\"\" />\n          </StyledCardPropertyIconWrapper>\n          <StyledCardProperty>\n            <StyledCardPropertyLabel>{item.label}</StyledCardPropertyLabel>\n            <StyledCardPropertyValue>{item.value}</StyledCardPropertyValue>\n          </StyledCardProperty>\n        </StyledCardPropertyContainer>\n      ));\n    }\n  }, [asset, cardProperties, currentIndex, ownedTokenIds, propertiesImages]);\n\n  return (\n    <StyledAssetDetailsContentWrapper>\n      {cardStatus === 'loading' ? (\n        <StyledLoadingHolder>\n          <StyledLoader color=\"#ed7a2d\" />\n        </StyledLoadingHolder>\n      ) : (\n        <>\n          {cardError && cardStatus === 'failed' ? (\n            <>\n              <StyledCardError>Asset not found</StyledCardError>\n            </>\n          ) : (\n            <StyledAssetDetailContent>\n              {openBuyModal && asset && (\n                <BuyCardModal\n                  address={params.add}\n                  mint={1234}\n                  price={urlTokenIdMarket?.minimumAmount.toNumber()}\n                  cardImg={asset.ls8MetaData[params.id ? params.id : 0].image}\n                  onClose={() => setOpenBuyModal(!openBuyModal)}\n                />\n              )}\n              {openSellModal && asset && (\n                <SellCardModal\n                  address={params.add}\n                  mint={1234}\n                  price={urlTokenIdMarket?.minimumAmount.toNumber()}\n                  cardImg={asset.ls8MetaData[params.id ? params.id : 0].image}\n                  onClose={() => setOpenSellModal(!openSellModal)}\n                />\n              )}\n              <StyledCardMainDetails>\n                <StyledMediaWrapper>\n                  <StyledMedia\n                    src={asset?.ls8MetaData[currentIndex]?.image}\n                    alt=\"\"\n                  />\n                  <a\n                    href={explorer && explorer.exploreUrl + asset?.address}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    <StyledExplorerIcon src={explorer?.icon} alt=\"\" />\n                  </a>\n                  {wasActiveProfile && ownedTokenIds && (\n                    <StyledMintControls>\n                      <StyledMintSkipButton onClick={previousMint}>\n                        <StyledMintSkipButtonImg src={BackwardsIcon} alt=\"\" />\n                      </StyledMintSkipButton>\n                      <StyledMintSliderIndex>\n                        {currentIndex + 1}/{ownedTokenIds?.length}\n                      </StyledMintSliderIndex>\n                      <StyledMintSkipButton onClick={nextMint}>\n                        <StyledMintSkipButtonImg src={ForwardsIcon} alt=\"\" />\n                      </StyledMintSkipButton>\n                    </StyledMintControls>\n                  )}\n                </StyledMediaWrapper>\n                <StyledCardInfoWrapper>\n                  <StyledCardPriceWrapper>\n                    <StyledCardPriceWrapperHeader>\n                      <StyledCardPriceLabel>Current Price</StyledCardPriceLabel>\n                      <StyledQuickActions>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={ReloadIcon} />\n                        </StyledReloadPriceAction>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={ShareIcon} />\n                        </StyledReloadPriceAction>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={OptionIcon} />\n                        </StyledReloadPriceAction>\n                      </StyledQuickActions>\n                    </StyledCardPriceWrapperHeader>\n                    {renderCardPrice}\n                  </StyledCardPriceWrapper>\n                  <StyledCardInfoAccordion title=\"Card Info\" enableToggle>\n                    <StyledCardInfo>\n                      {cardInfo.map((item) => (\n                        <StyledCardInfoContainer key={item.label}>\n                          <StyledCardInfoLabel>\n                            {item.label}\n                          </StyledCardInfoLabel>\n                          <StyledCardInfoValue>\n                            {item.valueType === 'address'\n                              ? `${item.value.slice(0, 8)}...${item.value.slice(\n                                  item.value.length - 4,\n                                  item.value.length,\n                                )}`\n                              : item.value}\n                          </StyledCardInfoValue>\n                        </StyledCardInfoContainer>\n                      ))}\n                    </StyledCardInfo>\n                  </StyledCardInfoAccordion>\n                </StyledCardInfoWrapper>\n              </StyledCardMainDetails>\n              <StyledCardPropertiesAccordion title=\"Details\" enableToggle>\n                <StyledCardProperties>\n                  {renderCardProperties}\n                </StyledCardProperties>\n              </StyledCardPropertiesAccordion>\n              <StyledMarketAccordion title=\"Market\" enableToggle>\n                <p>Market in progress...</p>\n              </StyledMarketAccordion>\n              <StyledHoldersAccordion title=\"Other Holders\" enableToggle>\n                {/* {renderHolderPagination} */}\n              </StyledHoldersAccordion>\n            </StyledAssetDetailContent>\n          )}\n        </>\n      )}\n    </StyledAssetDetailsContentWrapper>\n  );\n};\n\nexport default AssetDetails;\n"],"sourceRoot":""}