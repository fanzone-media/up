{"version":3,"sources":["pages/AssetDetails/AssetDetails.tsx"],"names":["AssetDetails","params","useParams","explorer","getChainExplorer","network","wasActiveProfile","useSelector","state","userData","me","activeUser","selectUserById","asset","selectCardById","add","owner","ownerStatus","status","cardError","cards","error","cardStatus","metaDataStatus","useState","currentIndex","setCurrentIndex","ownedTokenIds","useMemo","ownedAssets","find","item","assetAddress","toLowerCase","tokenIds","dispatch","useAppDispatch","STATUS","LOADING","fetchProfileByAddress","address","id","ls8MetaData","fetchMetaDataForTokenId","tokenId","length","toString","useEffect","fetchCard","window","scrollTo","propertiesImages","Tier","TierPropertyIcon","Edition","EditionPropertyIcon","CategoryPropertyIcon","SetPropertyIcon","Season","SeasonPropertyIcon","Zone","ZonePropertyIcon","League","SubzonePropertyIcon","Team","TeamPropertyIcon","cardProperties","label","value","tier","icon","edition","editionCategory","editionSet","season","zoneLabel","leagueLabel","teamLabel","cardInfo","valueType","totalSupply","renderCardProperties","attributes","map","src","trait_type","alt","color","image","href","exploreUrl","target","rel","onClick","previousIndex","BackwardsIcon","nextIndex","ForwardsIcon","ReloadIcon","ShareIcon","OptionIcon","WethIcon","title","enableToggle","slice"],"mappings":"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","file":"static/js/5.0d0491aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  BackwardsIcon,\n  CategoryPropertyIcon,\n  EditionPropertyIcon,\n  ForwardsIcon,\n  OptionIcon,\n  ReloadIcon,\n  SeasonPropertyIcon,\n  SetPropertyIcon,\n  ShareIcon,\n  SubzonePropertyIcon,\n  TeamPropertyIcon,\n  TierPropertyIcon,\n  WethIcon,\n  ZonePropertyIcon,\n} from '../../assets';\nimport { useSelector } from 'react-redux';\nimport { NetworkName, RootState } from '../../boot/types';\nimport {\n  fetchCard,\n  fetchMetaDataForTokenId,\n  selectCardById,\n} from '../../features/cards';\nimport { useEffect } from 'react';\nimport { fetchProfileByAddress, selectUserById } from '../../features/profiles';\nimport { useMemo } from 'react';\nimport {\n  StyledAssetDetailContent,\n  StyledCardError,\n  StyledLoader,\n  StyledLoadingHolder,\n  StyledAssetDetailsContentWrapper,\n  StyledCardInfoWrapper,\n  StyledCardPriceWrapper,\n  StyledCardInfo,\n  StyledCardMainDetails,\n  StyledMedia,\n  StyledMediaWrapper,\n  StyledCardPriceWrapperHeader,\n  StyledCardPriceLabel,\n  StyledQuickActions,\n  StyledReloadPriceAction,\n  StyledActionIcon,\n  StyledCardPriceValue,\n  StyledCardPriceValueWrapper,\n  StyledTokenIcon,\n  StyledActionsButtonWrapper,\n  StyledBuyButton,\n  StyledMakeOfferButton,\n  StyledCardInfoContainer,\n  StyledCardInfoLabel,\n  StyledCardInfoValue,\n  StyledCardInfoAccordion,\n  StyledCardPropertiesAccordion,\n  StyledCardProperties,\n  StyledCardPropertyIconWrapper,\n  StyledCardPropertyContainer,\n  StyledCardPropertyIcon,\n  StyledCardProperty,\n  StyledCardPropertyLabel,\n  StyledCardPropertyValue,\n  StyledHoldersAccordion,\n  StyledMarketAccordion,\n  StyledMintControls,\n  StyledMintSkipButton,\n  StyledMintSkipButtonImg,\n  StyledExplorerIcon,\n  StyledMintSliderIndex,\n} from './styles';\nimport { useAppDispatch } from '../../boot/store';\nimport { getChainExplorer, STATUS } from '../../utility';\n// import ReactTooltip from 'react-tooltip';\n// import { LSP4DigitalAssetApi } from '../../services/controllers/LSP4DigitalAsset';\n// import { useSigner } from 'wagmi';\n// import { Accordion } from '../../components/Accordion';\n// import { HolderPagination } from './HoldersPagination';\n\ninterface IPrams {\n  add: string;\n  network: NetworkName;\n  id: string;\n}\n\nconst AssetDetails: React.FC = () => {\n  const params = useParams<IPrams>();\n\n  const explorer = getChainExplorer(params.network);\n\n  const wasActiveProfile = useSelector((state: RootState) => state.userData.me);\n\n  const activeUser = useSelector(\n    (state: RootState) =>\n      wasActiveProfile &&\n      selectUserById(state.userData[params.network], wasActiveProfile),\n  );\n\n  // const profiles = useSelector((state: RootState) =>\n  //   selectUserIds(state.userData[params.network]),\n  // );\n\n  const asset = useSelector((state: RootState) =>\n    selectCardById(state, params.add),\n  );\n\n  const owner = useSelector((state: RootState) =>\n    selectUserById(\n      state.userData[params.network],\n      asset?.owner ? asset.owner : '',\n    ),\n  );\n\n  const ownerStatus = useSelector(\n    (state: RootState) => state.userData[params.network].status,\n  );\n\n  // const creators = useSelector((state: RootState) =>\n  //   selectAllUsersItems(state.userData[params.network]),\n  // )?.filter((item) => {\n  //   return asset?.creators.some((i) => {\n  //     return i === item.address && item.network === params.network;\n  //   });\n  // });\n\n  const cardError = useSelector((state: RootState) => state.cards.error);\n\n  const cardStatus = useSelector((state: RootState) => state.cards.status);\n\n  const metaDataStatus = useSelector(\n    (state: RootState) => state.cards.metaDataStatus,\n  );\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n\n  const ownedTokenIds = useMemo(\n    () =>\n      activeUser &&\n      activeUser.ownedAssets.find(\n        (item) => item.assetAddress.toLowerCase() === params.add.toLowerCase(),\n      )?.tokenIds,\n    [activeUser, params.add],\n  );\n\n  const dispatch = useAppDispatch();\n\n  // const tokenIdForSale = useMemo(\n  //   async () =>\n  //     params.id &&\n  //     (await LSP4DigitalAssetApi.getTokenSale(\n  //       params.add,\n  //       Number(params.id),\n  //       params.network,\n  //     )),\n  //   [params.add, params.network, params.id],\n  // );\n\n  useMemo(() => {\n    if (!asset || owner || ownerStatus === STATUS.LOADING) return;\n\n    dispatch(\n      fetchProfileByAddress({\n        address: asset.owner,\n        network: params.network,\n      }),\n    );\n  }, [asset, dispatch, owner, ownerStatus, params.network]);\n\n  useMemo(() => {\n    if (\n      !asset ||\n      !params.id ||\n      `${params.id}` in asset.ls8MetaData ||\n      metaDataStatus === STATUS.LOADING\n    )\n      return;\n    dispatch(\n      fetchMetaDataForTokenId({\n        assetAddress: params.add,\n        network: params.network,\n        tokenId: params.id,\n      }),\n    );\n  }, [asset, dispatch, metaDataStatus, params.add, params.id, params.network]);\n\n  useMemo(() => {\n    if (\n      !params.id &&\n      wasActiveProfile &&\n      ownedTokenIds &&\n      ownedTokenIds.length > 0 &&\n      asset &&\n      !(`${ownedTokenIds[currentIndex].toString()}` in asset.ls8MetaData) &&\n      metaDataStatus !== STATUS.LOADING\n    ) {\n      dispatch(\n        fetchMetaDataForTokenId({\n          assetAddress: params.add,\n          network: params.network,\n          tokenId: ownedTokenIds[currentIndex],\n        }),\n      );\n    }\n  }, [\n    asset,\n    currentIndex,\n    dispatch,\n    metaDataStatus,\n    ownedTokenIds,\n    params.add,\n    params.id,\n    params.network,\n    wasActiveProfile,\n  ]);\n\n  // useMemo(() => {\n  //   let addresses: string[] = [];\n  //   asset?.holders.forEach((item) => {\n  //     if (!profiles?.includes(item)) {\n  //       addresses.push(item);\n  //     }\n  //   });\n  //   if (addresses.length > 0) {\n  //     dispatch(\n  //       fetchAssetHolders({ address: addresses, network: params.network }),\n  //     );\n  //   }\n  // }, [asset?.holders, dispatch, params.network, profiles]);\n\n  // useMemo(() => {\n  //   let addresses: string[] = [];\n  //   asset?.creators.forEach((item) => {\n  //     if (!profiles?.includes(item)) {\n  //       addresses.push(item);\n  //     }\n  //   });\n  //   if (addresses.length > 0) {\n  //     dispatch(\n  //       fetchAssetCreator({ address: addresses, network: params.network }),\n  //     );\n  //   }\n  // }, [asset?.creators, dispatch, params.network, profiles]);\n\n  useEffect(() => {\n    if (!asset && cardStatus !== STATUS.LOADING) {\n      dispatch(fetchCard({ address: params.add, network: params.network }));\n    }\n    window.scrollTo(0, 0);\n  }, [asset, cardStatus, dispatch, params.add, params.network]);\n\n  const propertiesImages: { [key: string]: string } = useMemo(\n    () => ({\n      Tier: TierPropertyIcon,\n      Edition: EditionPropertyIcon,\n      'Edition Category': CategoryPropertyIcon,\n      'Edition Set': SetPropertyIcon,\n      Season: SeasonPropertyIcon,\n      Zone: ZonePropertyIcon,\n      League: SubzonePropertyIcon,\n      Team: TeamPropertyIcon,\n    }),\n    [],\n  );\n\n  const cardProperties = useMemo(\n    () => [\n      {\n        label: 'Tier',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.tier,\n        icon: TierPropertyIcon,\n      },\n      {\n        label: 'Edition',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.edition,\n        icon: EditionPropertyIcon,\n      },\n      {\n        label: 'Category',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.editionCategory,\n        icon: CategoryPropertyIcon,\n      },\n      {\n        label: 'Set',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.editionSet,\n        icon: SetPropertyIcon,\n      },\n      {\n        label: 'Season',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.season,\n        icon: SeasonPropertyIcon,\n      },\n      {\n        label: 'Zone',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.zoneLabel,\n        icon: ZonePropertyIcon,\n      },\n      {\n        label: 'League',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.leagueLabel,\n        icon: SubzonePropertyIcon,\n      },\n      {\n        label: 'Team',\n        value:\n          asset?.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n            ?.teamLabel,\n        icon: TeamPropertyIcon,\n      },\n    ],\n    [asset, currentIndex, ownedTokenIds],\n  );\n\n  const cardInfo: {\n    label: string;\n    value: string;\n    valueType?: string;\n  }[] = [\n    {\n      label: 'Contract Address',\n      value: asset ? asset.address : '',\n      valueType: 'address',\n    },\n    {\n      label: 'Mint',\n      value: ownedTokenIds ? ownedTokenIds[currentIndex].toString() : '',\n    },\n    {\n      label: 'Total amount of Tokens',\n      value: asset ? asset.totalSupply.toString() : '',\n    },\n    { label: 'Token Standard', value: '' },\n    { label: 'Network', value: asset ? asset.network : '' },\n    { label: 'Score', value: '' },\n    { label: 'Current owner', value: '', valueType: 'address' },\n  ];\n\n  const nextMint = () => {\n    const nextIndex = currentIndex + 1;\n    if (!ownedTokenIds || nextIndex >= ownedTokenIds.length) return;\n    setCurrentIndex(nextIndex);\n  };\n\n  const previousMint = () => {\n    const previousIndex = currentIndex - 1;\n    if (!ownedTokenIds || previousIndex < 0) return;\n    setCurrentIndex(previousIndex);\n  };\n\n  // const renderOwner = useMemo(() => {\n  //   if (asset?.address === params.add) {\n  //     if (owner?.address === asset.owner) {\n  //       const findBalanceOf = owner.ownedAssets.find(\n  //         (item) => item.assetAddress === params.add.toLowerCase(),\n  //       );\n  //       return (\n  //         <React.Fragment key={owner.address}>\n  //           <ProfileCard\n  //             userProfile={owner}\n  //             balance={findBalanceOf?.balance ? findBalanceOf.balance : 0}\n  //             type=\"owner\"\n  //             tooltipId=\"ownerTooltip\"\n  //           />\n  //           <ReactTooltip\n  //             id=\"ownerTooltip\"\n  //             getContent={(dataTip) => <span>Token Ids: {dataTip}</span>}\n  //           ></ReactTooltip>\n  //         </React.Fragment>\n  //       );\n  //     }\n  //   }\n  // }, [asset?.address, asset?.owner, params.add, owner]);\n\n  // const renderDesigners = useMemo(\n  //   () =>\n  //     creators?.map((creator: IProfile) => {\n  //       const findBalanceOf = creator.ownedAssets.find(\n  //         (item) => item.assetAddress === params.add.toLowerCase(),\n  //       );\n  //       return (\n  //         <React.Fragment key={creator.address}>\n  //           <ProfileCard\n  //             userProfile={creator}\n  //             balance={findBalanceOf?.balance ? findBalanceOf.balance : 0}\n  //             type=\"creator\"\n  //             tooltipId=\"designerTooltip\"\n  //           />\n  //           <ReactTooltip\n  //             id=\"designerTooltip\"\n  //             getContent={(dataTip) => <span>Token Ids: {dataTip}</span>}\n  //           ></ReactTooltip>\n  //         </React.Fragment>\n  //       );\n  //     }),\n  //   [creators, params.add],\n  // );\n\n  // const renderHolderPagination = useMemo(\n  //   () => <HolderPagination holdersAddresses={asset ? asset.holders : []} />,\n  //   [asset],\n  // );\n\n  const renderCardProperties = useMemo(() => {\n    if (\n      asset &&\n      asset.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n        ?.attributes &&\n      asset.ls8MetaData[ownedTokenIds ? ownedTokenIds[currentIndex] : 0]\n        .attributes.length > 0\n    ) {\n      return asset?.ls8MetaData[\n        ownedTokenIds ? ownedTokenIds[currentIndex] : 0\n      ].attributes.map((item) => {\n        if ('trait_type' in item) {\n          return (\n            <StyledCardPropertyContainer key={item.trait_type}>\n              <StyledCardPropertyIconWrapper>\n                <StyledCardPropertyIcon\n                  src={propertiesImages[item.trait_type]}\n                  alt=\"\"\n                />\n              </StyledCardPropertyIconWrapper>\n              <StyledCardProperty>\n                <StyledCardPropertyLabel>\n                  {item.trait_type}\n                </StyledCardPropertyLabel>\n                <StyledCardPropertyValue>{item.value}</StyledCardPropertyValue>\n              </StyledCardProperty>\n            </StyledCardPropertyContainer>\n          );\n        }\n        return null;\n      });\n    } else {\n      return cardProperties.map((item) => (\n        <StyledCardPropertyContainer key={item.label}>\n          <StyledCardPropertyIconWrapper>\n            <StyledCardPropertyIcon src={item.icon} alt=\"\" />\n          </StyledCardPropertyIconWrapper>\n          <StyledCardProperty>\n            <StyledCardPropertyLabel>{item.label}</StyledCardPropertyLabel>\n            <StyledCardPropertyValue>{item.value}</StyledCardPropertyValue>\n          </StyledCardProperty>\n        </StyledCardPropertyContainer>\n      ));\n    }\n  }, [asset, cardProperties, currentIndex, ownedTokenIds, propertiesImages]);\n\n  return (\n    <StyledAssetDetailsContentWrapper>\n      {cardStatus === 'loading' ? (\n        <StyledLoadingHolder>\n          <StyledLoader color=\"#ed7a2d\" />\n        </StyledLoadingHolder>\n      ) : (\n        <>\n          {cardError && cardStatus === 'failed' ? (\n            <>\n              <StyledCardError>Asset not found</StyledCardError>\n            </>\n          ) : (\n            <StyledAssetDetailContent>\n              <StyledCardMainDetails>\n                <StyledMediaWrapper>\n                  <StyledMedia\n                    src={asset?.ls8MetaData[currentIndex]?.image}\n                    alt=\"\"\n                  />\n                  <a\n                    href={explorer && explorer.exploreUrl + asset?.address}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    <StyledExplorerIcon src={explorer?.icon} alt=\"\" />\n                  </a>\n                  {wasActiveProfile && ownedTokenIds && (\n                    <StyledMintControls>\n                      <StyledMintSkipButton onClick={previousMint}>\n                        <StyledMintSkipButtonImg src={BackwardsIcon} alt=\"\" />\n                      </StyledMintSkipButton>\n                      <StyledMintSliderIndex>\n                        {currentIndex + 1}/{ownedTokenIds?.length}\n                      </StyledMintSliderIndex>\n                      <StyledMintSkipButton onClick={nextMint}>\n                        <StyledMintSkipButtonImg src={ForwardsIcon} alt=\"\" />\n                      </StyledMintSkipButton>\n                    </StyledMintControls>\n                  )}\n                </StyledMediaWrapper>\n                <StyledCardInfoWrapper>\n                  <StyledCardPriceWrapper>\n                    <StyledCardPriceWrapperHeader>\n                      <StyledCardPriceLabel>Current Price</StyledCardPriceLabel>\n                      <StyledQuickActions>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={ReloadIcon} />\n                        </StyledReloadPriceAction>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={ShareIcon} />\n                        </StyledReloadPriceAction>\n                        <StyledReloadPriceAction>\n                          <StyledActionIcon src={OptionIcon} />\n                        </StyledReloadPriceAction>\n                      </StyledQuickActions>\n                    </StyledCardPriceWrapperHeader>\n                    <StyledCardPriceValueWrapper>\n                      <StyledTokenIcon src={WethIcon} alt=\"\" />\n                      <StyledCardPriceValue>-</StyledCardPriceValue>\n                    </StyledCardPriceValueWrapper>\n                    <StyledActionsButtonWrapper>\n                      <StyledBuyButton>Buy now</StyledBuyButton>\n                      <StyledMakeOfferButton>Make offer</StyledMakeOfferButton>\n                    </StyledActionsButtonWrapper>\n                  </StyledCardPriceWrapper>\n                  <StyledCardInfoAccordion title=\"Card Info\" enableToggle>\n                    <StyledCardInfo>\n                      {cardInfo.map((item) => (\n                        <StyledCardInfoContainer key={item.label}>\n                          <StyledCardInfoLabel>\n                            {item.label}\n                          </StyledCardInfoLabel>\n                          <StyledCardInfoValue>\n                            {item.valueType === 'address'\n                              ? `${item.value.slice(0, 8)}...${item.value.slice(\n                                  item.value.length - 4,\n                                  item.value.length,\n                                )}`\n                              : item.value}\n                          </StyledCardInfoValue>\n                        </StyledCardInfoContainer>\n                      ))}\n                    </StyledCardInfo>\n                  </StyledCardInfoAccordion>\n                </StyledCardInfoWrapper>\n              </StyledCardMainDetails>\n              <StyledCardPropertiesAccordion title=\"Details\" enableToggle>\n                <StyledCardProperties>\n                  {renderCardProperties}\n                </StyledCardProperties>\n              </StyledCardPropertiesAccordion>\n              <StyledMarketAccordion title=\"Market\" enableToggle>\n                <p>Market in progress...</p>\n              </StyledMarketAccordion>\n              <StyledHoldersAccordion title=\"Other Holders\" enableToggle>\n                {/* {renderHolderPagination} */}\n              </StyledHoldersAccordion>\n              {/* <StyledGrid>\n                <StyledAssetDetailGrid>\n                  <StyledMediaWrapper>\n                    {params.network === 'l14' && (\n                      <a\n                        href={\n                          'https://universalprofile.cloud/asset/' +\n                          asset?.address\n                        }\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <StyledUniversalProfileIcon\n                          src={UniversalProfileIcon}\n                          alt=\"\"\n                        />\n                      </a>\n                    )}\n                    <a\n                      href={explorer && explorer.exploreUrl + asset?.address}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      <StyledBlockScoutIcon src={explorer?.icon} alt=\"\" />\n                    </a>\n                    <StyledStatsName>{metaCardInfo[0].data}</StyledStatsName>\n                    <StyledMetaCardImg src={asset?.ls8MetaData.image} alt=\"\" />\n                  </StyledMediaWrapper>\n                  <StyledDetailsWrapper>\n                    <StyledCardInfoLabel>Card Info</StyledCardInfoLabel>\n                    <StyledInfoGrid>{renderCardProperties}</StyledInfoGrid>\n                    <StyledFullName>{asset?.name}</StyledFullName>\n                  </StyledDetailsWrapper>\n                </StyledAssetDetailGrid>\n                <StyledExtraInfo>\n                  <StyledIssuerLabel>Issuer</StyledIssuerLabel>\n                  <StyledIssuerWrapper>{renderOwner}</StyledIssuerWrapper>\n                  <StyledCreatorLabel>Creator</StyledCreatorLabel>\n                  <StyledCreatorWrapper>{renderDesigners}</StyledCreatorWrapper>\n                </StyledExtraInfo>\n              </StyledGrid>\n              <StyledHolderLabel>Holder</StyledHolderLabel>\n              <StyledHolderWrapper>{renderHolders}</StyledHolderWrapper> */}\n            </StyledAssetDetailContent>\n          )}\n        </>\n      )}\n    </StyledAssetDetailsContentWrapper>\n  );\n};\n\nexport default AssetDetails;\n"],"sourceRoot":""}