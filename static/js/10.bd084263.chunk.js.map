{"version":3,"sources":["pages/FanzoneClubTest/FanzoneClubTest.tsx"],"names":["validChainIds","fanzoneClubContractAddress","FanzoneClub","useConnect","connectData","data","useNetwork","network","useSigner","signer","useAccount","account","fanzoneClubContract","useContract","addressOrName","contractInterface","FanzoneClubABI","signerOrProvider","useState","STATUS","IDLE","status","setStatus","transactionHash","tokenIdMinted","transactionResponse","setTransactionResponse","maticAmount","BigNumber","from","amount","publicSale","whiteListSale","ownedPasses","formInput","setFormInput","error","setError","mintFanzoneClubCard","a","LOADING","mint","value","then","transaction","wait","receipt","parseInt","logs","topics","SUCCESSFUL","catch","err","message","whitelistMint","useCallback","getHexProof","address","validConnection","useMemo","isValidConnection","connected","chain","id","useEffect","price","balanceOf","src","FanzoneClubCardsImg","alt","toNumber","parseFloat","ethers","utils","formatEther","toFixed","disabled","onClick","color","target","href"],"mappings":"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","file":"static/js/10.bd084263.chunk.js","sourcesContent":["import { FC, useState, useEffect, useCallback, useMemo } from 'react';\nimport { BigNumber, ethers } from 'ethers';\nimport {\n  useAccount,\n  useConnect,\n  useContract,\n  useNetwork,\n  useSigner,\n} from 'wagmi';\nimport { FanzoneClubCardsImg } from '../../assets';\nimport { FanzoneClubABI } from '../../services/utilities/ABIs/FanzoneClubABI';\nimport { STATUS, isValidConnection } from '../../utility';\nimport { getHexProof } from '../../utility/merkleHash';\nimport {\n  StyledInputLabel,\n  StyledBuyClubCardButton,\n  StyledInputWrapper,\n  StyledErrorMessage,\n  StyledFanzoneClubCardsImg,\n  StyledFanzoneClubPage,\n  StyledFanzoneClubFormContainer,\n  StyledTransactionResponseWrapper,\n  StyledOpenSeaLink,\n  StyledPolygonScanLink,\n  StyledWelcomeTest,\n  StyledBackToBuyButton,\n  StyledBalanceLabel,\n} from '../FanzoneClub/styles';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { StyledLoader, StyledLoadingHolder } from '../AssetDetails/styles';\n\nconst validChainIds = [137];\nconst fanzoneClubContractAddress = '0x34c01dD64203b566C4CaE656C832d5a449A34c98';\n\nconst FanzoneClub: FC = () => {\n  const [{ data: connectData }] = useConnect();\n  const [{ data: network }] = useNetwork();\n  const [{ data: signer }] = useSigner();\n  const [{ data: account }] = useAccount();\n  const fanzoneClubContract = useContract({\n    addressOrName: fanzoneClubContractAddress,\n    contractInterface: FanzoneClubABI,\n    signerOrProvider: signer,\n  });\n  const [status, setStatus] = useState<STATUS>(STATUS.IDLE);\n  const [transactionResponse, setTransactionResponse] = useState<{\n    tokenIdMinted: number | null;\n    transactionHash: string | null;\n  }>({\n    transactionHash: null,\n    tokenIdMinted: null,\n  });\n  const [formInput, setFormInput] = useState<{\n    maticAmount: BigNumber;\n    amount: number;\n    publicSale: boolean;\n    whiteListSale: boolean;\n    ownedPasses: BigNumber;\n  }>({\n    maticAmount: BigNumber.from(0),\n    amount: 1,\n    publicSale: false,\n    whiteListSale: false,\n    ownedPasses: BigNumber.from(0),\n  });\n  const [error, setError] = useState<string>();\n\n  const mintFanzoneClubCard = async () => {\n    setError('');\n    setStatus(STATUS.LOADING);\n    await fanzoneClubContract\n      .mint(formInput.amount, true, {\n        value: formInput.maticAmount,\n      })\n      .then(async (transaction: TransactionResponse) => {\n        await transaction.wait(1).then((receipt) => {\n          setTransactionResponse({\n            tokenIdMinted: parseInt(receipt.logs[1].topics[3]),\n            transactionHash: receipt.transactionHash,\n          });\n          setStatus(STATUS.SUCCESSFUL);\n        });\n      })\n      .catch((err: any) => {\n        setError(err.data ? err.data.message : err.message);\n        setStatus(STATUS.IDLE);\n      });\n  };\n\n  const whitelistMint = useCallback(async () => {\n    setError('');\n    setStatus(STATUS.LOADING);\n    if (!account) return;\n    await fanzoneClubContract\n      .whitelistMint(formInput.amount, true, getHexProof(account.address), {\n        value: formInput.maticAmount,\n      })\n      .then(async (transaction: TransactionResponse) => {\n        await transaction.wait(1).then((receipt) => {\n          setTransactionResponse({\n            tokenIdMinted: parseInt(receipt.logs[1].topics[3]),\n            transactionHash: receipt.transactionHash,\n          });\n          setStatus(STATUS.SUCCESSFUL);\n        });\n      })\n      .catch((err: any) => {\n        setError(err.data ? err.data.message : err.message);\n        setStatus(STATUS.IDLE);\n      });\n  }, [fanzoneClubContract, formInput.amount, formInput.maticAmount, account]);\n\n  const validConnection = useMemo(\n    () =>\n      isValidConnection(\n        connectData.connected,\n        network.chain?.id || 0,\n        validChainIds,\n      ),\n    [connectData.connected, network.chain],\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (!fanzoneClubContract || !validConnection || !account) return;\n      setFormInput({\n        ...formInput,\n        maticAmount: await fanzoneClubContract.price(),\n        publicSale: await fanzoneClubContract.publicSale(),\n        whiteListSale: await fanzoneClubContract.whiteListSale(),\n        ownedPasses: await fanzoneClubContract.balanceOf(account.address),\n      });\n    })();\n    // Adding formInput to the dependencies array will end up in an infinit loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fanzoneClubContract, validConnection, account]);\n\n  return (\n    <StyledFanzoneClubPage>\n      <StyledFanzoneClubFormContainer>\n        <StyledFanzoneClubCardsImg src={FanzoneClubCardsImg} alt=\"\" />\n        {!connectData.connected ? (\n          <StyledErrorMessage>\n            Wallet not connected! Please connect via Metamask first\n          </StyledErrorMessage>\n        ) : (\n          !validConnection && (\n            <StyledErrorMessage>\n              Wrong Chain! Please switch to Polygon Matic\n            </StyledErrorMessage>\n          )\n        )}\n        {error !== '' && <StyledErrorMessage>{error}</StyledErrorMessage>}\n        {status === STATUS.IDLE && (\n          <>\n            <StyledBalanceLabel>\n              Your owned passes: {formInput.ownedPasses.toNumber()}\n            </StyledBalanceLabel>\n            <StyledInputWrapper>\n              <StyledInputLabel>\n                Amount in Matic:{' '}\n                {parseFloat(\n                  ethers.utils.formatEther(formInput.maticAmount),\n                ).toFixed(7)}\n              </StyledInputLabel>\n            </StyledInputWrapper>\n            <StyledInputWrapper>\n              <StyledInputLabel>\n                Amount to mint: {formInput.amount}\n              </StyledInputLabel>\n            </StyledInputWrapper>\n            {(formInput.whiteListSale || formInput.publicSale) && (\n              <StyledBuyClubCardButton\n                disabled={!validConnection}\n                onClick={() =>\n                  formInput.whiteListSale\n                    ? whitelistMint()\n                    : mintFanzoneClubCard()\n                }\n              >\n                {formInput.whiteListSale\n                  ? 'Buy pass now (private sale)'\n                  : 'Buy pass now (public sale)'}\n              </StyledBuyClubCardButton>\n            )}\n          </>\n        )}\n        {status === STATUS.LOADING && (\n          <StyledLoadingHolder>\n            <StyledLoader color=\"#ed7a2d\" />\n          </StyledLoadingHolder>\n        )}\n        {status === STATUS.SUCCESSFUL && (\n          <>\n            <StyledBackToBuyButton onClick={() => setStatus(STATUS.IDLE)}>\n              {'<'}-- Back to buy more\n            </StyledBackToBuyButton>\n            <StyledWelcomeTest>\n              Welcome to the Fanzone Sports Club!\n            </StyledWelcomeTest>\n            <StyledTransactionResponseWrapper>\n              <StyledOpenSeaLink\n                target=\"_blank\"\n                href={`https://opensea.io/assets/matic/${fanzoneClubContractAddress}/${transactionResponse.tokenIdMinted}`}\n              >\n                View pass on OpenSea\n              </StyledOpenSeaLink>\n              <StyledPolygonScanLink\n                target=\"_blank\"\n                href={`https://polygonscan.com/tx/${transactionResponse.transactionHash}`}\n              >\n                View tx on polygonscan\n              </StyledPolygonScanLink>\n            </StyledTransactionResponseWrapper>\n          </>\n        )}\n      </StyledFanzoneClubFormContainer>\n    </StyledFanzoneClubPage>\n  );\n};\n\nexport default FanzoneClub;\n"],"sourceRoot":""}