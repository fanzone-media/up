{"version":3,"sources":["features/profiles/ProfileCard/ProfileCard.tsx","hooks/useDefaultAddresses/useDefaultAddresses.ts","pages/Profiles/Profiles.tsx"],"names":["ProfileCard","userProfile","balance","type","tooltipId","params","useParams","getTooltipTokenIds","useMemo","ownedAssets","find","asset","assetAddress","toLowerCase","add","to","network","Web3","utils","toChecksumAddress","address","demo","data-tip","tokenIds","data-for","length","src","polygon","alt","makeBlockie","profileImage","name","useDefaultAddresses","useState","addresses","setAddresses","error","setError","useEffect","getDefaultAddresses","then","result","Profiles","dispatch","useAppDispatch","profileAddresses","errorLoadingProfileAddresses","assetsAddresses","errorLoadingAssetsAddresses","isTablet","useMediaQuery","theme","screen","md","usePagination","profilesRange","range","setProfilesRange","setRange","assetsRange","setAssetsRange","fetchAllProfiles","slice","userProfiles","useSelector","state","selectAllUsersItems","userData","filter","item","some","i","owner","userProfilesState","status","cards","selectAllCardItems","fetchAllCards","assetsState","nftIconParams","LuksoHeader","url","NftShowcaseIcon","text","NftBuyAndSellIcon","NftGrantPermissionIcon","NftTransferIcon","NftPersonaliseIcon","NftExchangeIcon","LuksoBadge","Lukso","map","components","nbrOfAllComponents","setComponentsRange","MetaCard","digitalCard"],"mappings":"yNAiCaA,EAAgC,SAAC,GAK/B,IAJbC,EAIY,EAJZA,YACAC,EAGY,EAHZA,QACAC,EAEY,EAFZA,KACAC,EACY,EADZA,UAEMC,EAASC,cACTC,EAAqBC,mBACzB,iBACW,SAATL,GACAF,EAAYQ,YAAYC,MACtB,SAACC,GAAD,OACEA,EAAMC,aAAaC,gBAAkBR,EAAOS,IAAID,mBAEtD,CAACR,EAAOS,IAAKX,EAAMF,EAAYQ,cAGjC,OACE,eAAC,IAAD,CACEM,GACE,WAAIV,EAAOW,QAAX,aACAC,IAAKC,MAAMC,kBAAkBlB,EAAYmB,SAE3CC,KAAe,SAATlB,EACNmB,WACW,SAATnB,GAAmBI,GAAsBA,EAAmBgB,SAE9DC,WAAUpB,EATZ,UAWE,cAAC,IAAD,CAAsBiB,KAAe,SAATlB,EAA5B,SACE,cAAC,IAAD,CAAekB,KAAe,SAATlB,EAArB,SACY,SAATA,EAAkBF,EAAYQ,YAAYgB,OAASvB,MAGxD,cAAC,IAAD,CACEwB,IAAKC,IACLC,IAAI,GACJP,KAAe,SAATlB,IAER,eAAC,IAAD,CAAoBkB,KAAe,SAATlB,EAA1B,UACE,cAAC,IAAD,CACEuB,IAAKG,IAAY5B,EAAYmB,SAC7BQ,IAAI,GACJP,KAAe,SAATlB,IAER,cAAC,IAAD,CACEuB,IAAKzB,EAAY6B,aACjBF,IAAI,GACJP,KAAe,SAATlB,OAGV,cAAC,IAAD,CAA4BkB,KAAe,SAATlB,EAAlC,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAmBkB,KAAe,SAATlB,EAAzB,UACG,IADH,IAEIF,EAAY8B,KAAM,OAEtB,cAAC,IAAD,qC,4JCpFGC,EAAsB,SACjC7B,GAEA,IAAME,EAASC,cACf,EAAkC2B,mBAAyB,IAA3D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WACRC,YAAoBlC,EAAOW,QAASb,GAAMqC,MACxC,SAACC,GACCN,EAAaM,MAEf,SAACL,GACCC,EAASD,QAGZ,CAAC/B,EAAOW,QAASb,IAEb,CAAE+B,YAAWE,U,kCCkPPM,UA/MY,WACzB,IAAMrC,EAASC,cACTqC,EAAWC,cAEjB,EACEZ,EAAoB,oBADHa,EAAnB,EAAQX,UAAoCY,EAA5C,EAAqCV,MAErC,EACEJ,EAAoB,mBADHe,EAAnB,EAAQb,UAAmCc,EAA3C,EAAoCZ,MAG9Ba,EAAWC,YAAcC,IAAMC,OAAOC,IAC5C,EAA6DC,cAA9CC,EAAf,EAAQC,MAAgCC,EAAxC,EAA8BC,SAC9B,EAAyDJ,cAA1CK,EAAf,EAAQH,MAA8BI,EAAtC,EAA4BF,SAE5BpB,qBAAU,WACwB,IAA5BO,EAAiBpB,QACrBkB,EACEkB,YAAiB,CACf3B,UAAWW,EAAiBiB,MAC1BP,EAAc,GACdA,EAAc,GAAK,GAErBvC,QAASX,EAAOW,aAInB,CAAC2B,EAAUE,EAAkBxC,EAAOW,QAASuC,IAEhD,IAAMQ,EAAeC,aAAY,SAACC,GAAD,OAC/BC,YAAoBD,EAAME,SAAS9D,EAAOW,UAAUoD,QAAO,SAACC,GAAD,OACzDxB,EACGiB,MAAMP,EAAc,GAAIA,EAAc,GAAK,GAC3Ce,MAAK,SAACC,GAAD,OAAOA,IAAMF,EAAKjD,SAA0B,KAAfiD,EAAKG,eAIxCC,EAAoBT,aACxB,SAACC,GAAD,OAAsBA,EAAME,SAAS9D,EAAOW,SAAS0D,UAGjDC,EAAQX,aAAY,SAACC,GAAD,OACxBW,YAAmBX,EAAMU,MAAMtE,EAAOW,aACtCoD,QAAO,SAACC,GAAD,OACPtB,EACGe,MAAMH,EAAY,GAAIA,EAAY,GAAK,GACvCW,MAAK,SAACC,GAAD,OAAOA,IAAMF,EAAKjD,cAG5BkB,qBAAU,WACuB,IAA3BS,EAAgBtB,QACpBkB,EACEkC,YAAc,CACZ3C,UAAWa,EAAgBe,MAAMH,EAAY,GAAIA,EAAY,GAAK,GAClE3C,QAASX,EAAOW,aAGnB,CAAC2B,EAAUI,EAAiB1C,EAAOW,QAAS2C,IAE/C,IAAMmB,EAAcd,aAClB,SAACC,GAAD,OAAsBA,EAAMU,MAAMtE,EAAOW,SAAS0D,UAM9CK,GAHkC,QAAnB1E,EAAOW,SAAqBX,EAAOW,QACzCgE,IAEO,CACpB,CACEC,IAAKC,IACLC,KAAM,gCAER,CACEF,IAAKG,IACLD,KAAM,oFAER,CACEF,IAAKI,IACLF,KAAM,iFAER,CACEF,IAAKK,IACLH,KAAM,2EAER,CACEF,IAAKM,IACLJ,KAAM,4EAER,CACEF,IAAKO,IACLL,KAAM,mDAIV,OACE,eAAC,IAAD,WACE,eAAC,IAAD,YACIlC,GACA,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWvB,IAAK+D,QAElB,cAAC,IAAD,UACE,cAAC,IAAD,CAAW/D,IAAKgE,WAItB,eAAC,IAAD,WACE,cAAC,IAAD,oDACA,cAAC,IAAD,kGAKDzC,GAAY,cAAC,IAAD,QAEbA,GAAY,cAAC,IAAD,IACd,eAAC,IAAD,WACE,eAAC,IAAD,WACGA,GACC,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWvB,IAAK+D,QAElB,cAAC,IAAD,UACE,cAAC,IAAD,CAAW/D,IAAKgE,WAItB,eAAC,IAAD,WACE,cAAC,IAAD,4CACA,cAAC,IAAD,4WAUHzC,GAAY,cAAC,IAAD,IACb,cAAC,IAAD,UACG8B,EAAcY,KAAI,gBAAGV,EAAH,EAAGA,IAAKE,EAAR,EAAQA,KAAR,OACjB,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWzD,IAAKuD,MAElB,cAAC,IAAD,UAAoBE,YAIzBlC,GAAY,cAAC,IAAD,IACb,qCACGH,EACC,cAAC,IAAD,UACE,cAAC,IAAD,uCAKF,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,OAEF,cAAC,IAAD,CACE4B,OAAQD,EACRmB,WAAY7B,EAAa4B,KAAI,SAAC1F,GAAD,OAC3B,cAACD,EAAA,EAAD,CAEEC,YAAaA,EACbE,KAAK,QAFAF,EAAYmB,YAKrByE,mBAAoBhD,EAAiBpB,OACrCqE,mBAAoBrC,OAIzBT,EACC,cAAC,IAAD,UACE,cAAC,IAAD,qCAGF,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,cAAC,IAAD,OAEF,cAAC,IAAD,CACE0B,OAAQI,EACRc,WAAYjB,EAAMgB,KAAI,SAAChF,GAAD,OACpB,cAACoF,EAAA,EAAD,CAEEC,YAAarF,EACbR,KAAK,QAFAQ,EAAMS,YAKfyE,mBAAoB9C,EAAgBtB,OACpCqE,mBAAoBlC","file":"static/js/8.d25ded34.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { IProfile } from '../../../services/models';\nimport polygon from '../../../assets/polygon.svg';\nimport { NetworkName } from '../../../boot/types';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport {\n  StyledBalance,\n  StyledBalanceWrapper,\n  StyledPolygon,\n  StyledProfileBlockie,\n  StyledProfileCard,\n  StyledProfileDetail,\n  StyledProfileDetailWrapper,\n  StyledProfileImg,\n  StyledProfileMedia,\n  StyledProfileName,\n  StyledProfileRole,\n} from './styles';\nimport { useParams } from 'react-router-dom';\nimport Web3 from 'web3';\n\ninterface Iprops {\n  userProfile: IProfile;\n  type: string;\n  balance?: number;\n  tooltipId?: string;\n}\n\ninterface IParams {\n  network: NetworkName;\n  add: string;\n}\n\nexport const ProfileCard: React.FC<Iprops> = ({\n  userProfile,\n  balance,\n  type,\n  tooltipId,\n}: Iprops) => {\n  const params = useParams<IParams>();\n  const getTooltipTokenIds = useMemo(\n    () =>\n      type !== 'demo' &&\n      userProfile.ownedAssets.find(\n        (asset) =>\n          asset.assetAddress.toLowerCase() === params.add.toLowerCase(),\n      ),\n    [params.add, type, userProfile.ownedAssets],\n  );\n\n  return (\n    <StyledProfileCard\n      to={\n        `/${params.network}/profile/` +\n        Web3.utils.toChecksumAddress(userProfile.address)\n      }\n      demo={type === 'demo' ? true : false}\n      data-tip={\n        type !== 'demo' && getTooltipTokenIds && getTooltipTokenIds.tokenIds\n      }\n      data-for={tooltipId}\n    >\n      <StyledBalanceWrapper demo={type === 'demo' ? true : false}>\n        <StyledBalance demo={type === 'demo' ? true : false}>\n          {type === 'demo' ? userProfile.ownedAssets.length : balance}\n        </StyledBalance>\n      </StyledBalanceWrapper>\n      <StyledPolygon\n        src={polygon}\n        alt=\"\"\n        demo={type === 'demo' ? true : false}\n      />\n      <StyledProfileMedia demo={type === 'demo' ? true : false}>\n        <StyledProfileBlockie\n          src={makeBlockie(userProfile.address)}\n          alt=\"\"\n          demo={type === 'demo' ? true : false}\n        />\n        <StyledProfileImg\n          src={userProfile.profileImage}\n          alt=\"\"\n          demo={type === 'demo' ? true : false}\n        />\n      </StyledProfileMedia>\n      <StyledProfileDetailWrapper demo={type === 'demo' ? true : false}>\n        <StyledProfileDetail>\n          <StyledProfileName demo={type === 'demo' ? true : false}>\n            {' '}\n            @{userProfile.name}{' '}\n          </StyledProfileName>\n          <StyledProfileRole>FANZONE user</StyledProfileRole>\n        </StyledProfileDetail>\n      </StyledProfileDetailWrapper>\n    </StyledProfileCard>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NetworkName } from '../../boot/types';\nimport { getDefaultAddresses } from '../../utility/content/addresses';\nimport { Address } from '../../utils/types';\n\nexport const useDefaultAddresses = (\n  type: 'profileAddresses' | 'assetsAddresses',\n) => {\n  const params = useParams<{ network: NetworkName }>();\n  const [addresses, setAddresses] = useState<Array<Address>>([]);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    getDefaultAddresses(params.network, type).then(\n      (result) => {\n        setAddresses(result);\n      },\n      (error) => {\n        setError(error);\n      },\n    );\n  }, [params.network, type]);\n\n  return { addresses, error };\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ProfileCard } from '../../features/profiles/ProfileCard';\nimport { NetworkName, RootState } from '../../boot/types';\nimport { fetchAllProfiles, selectAllUsersItems } from '../../features/profiles';\nimport { ICard, IProfile } from '../../services/models';\nimport { Pagination } from '../../components';\nimport {\n  StyledContentwrappar,\n  StyledDescription,\n  StyledHeaderSection,\n  StyledHeaderContent,\n  StyledMainContent,\n  StyledHeading,\n  StyledDivider,\n  StyledProfilesHeader,\n  StyledProfileHeading,\n  StyledImg,\n  StyledInfoSection,\n  StyledInfoHeading,\n  StyledInfoContent,\n  StyledContainer,\n  StyledLuksoBadge,\n  StyledLuksoIcon,\n  StyledLuksoLogo,\n  StyledAd,\n  StyledNftInfoSection,\n  StyledNftInfo,\n  StyledNftInfoIcon,\n  StyledNftInfoText,\n} from './styles';\nimport { Search } from '../../components';\nimport { theme } from '../../boot/styles';\nimport { useAppDispatch } from '../../boot/store';\nimport { useParams } from 'react-router-dom';\nimport { fetchAllCards, selectAllCardItems } from '../../features/cards';\nimport { MetaCard } from '../../features/cards/MetaCard';\nimport { useDefaultAddresses } from '../../hooks/useDefaultAddresses';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useMediaQuery } from '../../hooks/useMediaQuery';\nimport {\n  BgFanzoneHero,\n  LuksoHeader,\n  HeaderBackground,\n  LuksoBadge,\n  Lukso,\n  HeaderAd,\n  NftShowcaseIcon,\n  NftBuyAndSellIcon,\n  NftGrantPermissionIcon,\n  NftTransferIcon,\n  NftPersonaliseIcon,\n  NftExchangeIcon,\n} from '../../assets';\n\ninterface IParams {\n  network: NetworkName;\n}\n\nconst Profiles: React.FC = () => {\n  const params = useParams<IParams>();\n  const dispatch = useAppDispatch();\n\n  const { addresses: profileAddresses, error: errorLoadingProfileAddresses } =\n    useDefaultAddresses('profileAddresses');\n  const { addresses: assetsAddresses, error: errorLoadingAssetsAddresses } =\n    useDefaultAddresses('assetsAddresses');\n\n  const isTablet = useMediaQuery(theme.screen.md);\n  const { range: profilesRange, setRange: setProfilesRange } = usePagination();\n  const { range: assetsRange, setRange: setAssetsRange } = usePagination();\n\n  useEffect(() => {\n    if (profileAddresses.length === 0) return;\n    dispatch(\n      fetchAllProfiles({\n        addresses: profileAddresses.slice(\n          profilesRange[0],\n          profilesRange[1] + 1,\n        ),\n        network: params.network,\n      }),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, profileAddresses, params.network, profilesRange]);\n\n  const userProfiles = useSelector((state: RootState) =>\n    selectAllUsersItems(state.userData[params.network]).filter((item) =>\n      profileAddresses\n        .slice(profilesRange[0], profilesRange[1] + 1)\n        .some((i) => i === item.address && item.owner !== ''),\n    ),\n  );\n\n  const userProfilesState = useSelector(\n    (state: RootState) => state.userData[params.network].status,\n  );\n\n  const cards = useSelector((state: RootState) =>\n    selectAllCardItems(state.cards[params.network]),\n  ).filter((item) =>\n    assetsAddresses\n      .slice(assetsRange[0], assetsRange[1] + 1)\n      .some((i) => i === item.address),\n  );\n\n  useEffect(() => {\n    if (assetsAddresses.length === 0) return;\n    dispatch(\n      fetchAllCards({\n        addresses: assetsAddresses.slice(assetsRange[0], assetsRange[1] + 1),\n        network: params.network,\n      }),\n    );\n  }, [dispatch, assetsAddresses, params.network, assetsRange]);\n\n  const assetsState = useSelector(\n    (state: RootState) => state.cards[params.network].status,\n  );\n\n  const luksoNetwork = params.network === 'l14' || params.network === 'l16';\n  const imgUrl = LuksoHeader;\n\n  const nftIconParams = [\n    {\n      url: NftShowcaseIcon,\n      text: 'Showcase and share your NFTs',\n    },\n    {\n      url: NftBuyAndSellIcon,\n      text: 'Buy and sell NFTs (based on LSP8) decentrally from and to your Universal Profile',\n    },\n    {\n      url: NftGrantPermissionIcon,\n      text: 'Grant permission over each single NFTs & vaults to wallets and decentral Apps',\n    },\n    {\n      url: NftTransferIcon,\n      text: 'Transfer token & NFTs to yours and other wallets, look-up on blockscout',\n    },\n    {\n      url: NftPersonaliseIcon,\n      text: 'Personalise your own Universal Profile with pictures, social media links',\n    },\n    {\n      url: NftExchangeIcon,\n      text: 'Exchange LYX (of L16) to Wrapped LYX (on L16)',\n    },\n  ];\n\n  return (\n    <StyledMainContent>\n      <StyledHeaderSection>\n        {!isTablet && (\n          <StyledLuksoLogo>\n            <StyledLuksoBadge>\n              <StyledImg src={LuksoBadge} />\n            </StyledLuksoBadge>\n            <StyledLuksoIcon>\n              <StyledImg src={Lukso} />\n            </StyledLuksoIcon>\n          </StyledLuksoLogo>\n        )}\n        <StyledHeaderContent>\n          <StyledHeading>Token & NFT Wallet With Vault Manager</StyledHeading>\n          <StyledDescription>\n            Fanzone is backed by an amazing remote teamof 20+ creative & driven\n            individuals.\n          </StyledDescription>\n        </StyledHeaderContent>\n        {isTablet && <StyledAd />}\n      </StyledHeaderSection>\n      {!isTablet && <StyledAd />}\n      <StyledContentwrappar>\n        <StyledInfoSection>\n          {isTablet && (\n            <StyledLuksoLogo>\n              <StyledLuksoBadge>\n                <StyledImg src={LuksoBadge} />\n              </StyledLuksoBadge>\n              <StyledLuksoIcon>\n                <StyledImg src={Lukso} />\n              </StyledLuksoIcon>\n            </StyledLuksoLogo>\n          )}\n          <StyledInfoContent>\n            <StyledInfoHeading>What can you do with your UP?</StyledInfoHeading>\n            <StyledDescription>\n              Universal Profiles are based on the maybe most advanced and\n              decentral identity standard (ERC725), created by Fabian\n              Vogelsteller and LUKSO. Instead of plain old wallets, a universal\n              profile can be customised like a social media profile - but is in\n              your complete control. You can collect any token and NFTs on it.\n              And you can give any decentral\n            </StyledDescription>\n          </StyledInfoContent>\n        </StyledInfoSection>\n        {isTablet && <StyledDivider />}\n        <StyledNftInfoSection>\n          {nftIconParams.map(({ url, text }) => (\n            <StyledNftInfo>\n              <StyledNftInfoIcon>\n                <StyledImg src={url} />\n              </StyledNftInfoIcon>\n              <StyledNftInfoText>{text}</StyledNftInfoText>\n            </StyledNftInfo>\n          ))}\n        </StyledNftInfoSection>\n        {isTablet && <StyledDivider />}\n        <>\n          {errorLoadingProfileAddresses ? (\n            <StyledProfilesHeader>\n              <StyledProfileHeading>\n                Error loading profiles\n              </StyledProfileHeading>\n            </StyledProfilesHeader>\n          ) : (\n            <>\n              <StyledProfilesHeader>\n                <StyledProfileHeading>Profiles</StyledProfileHeading>\n                <Search />\n              </StyledProfilesHeader>\n              <Pagination\n                status={userProfilesState}\n                components={userProfiles.map((userProfile: IProfile) => (\n                  <ProfileCard\n                    key={userProfile.address}\n                    userProfile={userProfile}\n                    type=\"demo\"\n                  />\n                ))}\n                nbrOfAllComponents={profileAddresses.length}\n                setComponentsRange={setProfilesRange}\n              />\n            </>\n          )}\n          {errorLoadingAssetsAddresses ? (\n            <StyledProfilesHeader>\n              <StyledProfileHeading>Error loading assets</StyledProfileHeading>\n            </StyledProfilesHeader>\n          ) : (\n            <>\n              <StyledProfilesHeader>\n                <StyledProfileHeading>Assets</StyledProfileHeading>\n                <Search />\n              </StyledProfilesHeader>\n              <Pagination\n                status={assetsState}\n                components={cards.map((asset: ICard) => (\n                  <MetaCard\n                    key={asset.address}\n                    digitalCard={asset}\n                    type=\"demo\"\n                  />\n                ))}\n                nbrOfAllComponents={assetsAddresses.length}\n                setComponentsRange={setAssetsRange}\n              />\n            </>\n          )}\n        </>\n      </StyledContentwrappar>\n    </StyledMainContent>\n  );\n};\n\nexport default Profiles;\n"],"sourceRoot":""}