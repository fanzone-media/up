{"version":3,"sources":["utility/merkleHash.ts","pages/FanzoneClub/styles.ts","pages/FanzoneClub/FanzoneClub.tsx"],"names":["getHexProof","claimingAddress","a","fetch","then","response","json","whiteListAdsresses","leafNodes","map","addr","keccak256","merkelTree","MerkleTree","sortPairs","StyledFanzoneClubPage","styled","div","StyledFanzoneClubFormContainer","theme","screen","xs","StyledFanzoneClubCardsImg","img","StyledBalanceLabel","p","StyledInputWrapper","StyledInputLabel","label","StyledBuyClubCardButton","input","button","props","disabled","StyledErrorMessage","StyledTransactionResponseWrapper","StyledBackToBuyButton","StyledWelcomeTest","h3","font","weight","bold","StyledOpenSeaLink","StyledPolygonScanLink","FanzoneClub","location","useLocation","useMemo","pathname","includes","validChainIds","expectedChainName","fanzoneClubContractAddress","numbersAfterDecimal","isConnected","useAccount","chain","useNetwork","signer","useSigner","data","account","address","fanzoneClubContract","useContract","abi","FanzoneClubABI","signerOrProvider","useState","STATUS","IDLE","status","setStatus","transactionHash","tokenIdMinted","transactionResponse","setTransactionResponse","maticAmount","BigNumber","from","amount","publicSale","whiteListSale","ownedPasses","formInput","setFormInput","error","setError","mintFanzoneClubCard","useCallback","LOADING","mint","value","transaction","wait","receipt","parseInt","logs","topics","SUCCESSFUL","catch","err","message","whitelistMint","reason","validConnection","isValidConnection","id","useEffect","price","balanceOf","src","FanzoneClubCardsImg","alt","toNumber","parseFloat","ethers","utils","formatEther","toFixed","onClick","color","target","href"],"mappings":"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","file":"static/js/13.5f0dd486.chunk.js","sourcesContent":["// @TODO: remove console.log\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\nimport { Address } from '../utils/types';\n\nexport const getHexProof = async (claimingAddress: Address) => {\n  //List of addresses stored in seperate js file\n  const whiteListAdsresses = await fetch('./whitelistedAddresses.json').then(\n    function (response) {\n      return response.json();\n    },\n  );\n\n  const leafNodes = whiteListAdsresses.map((addr: Address) => keccak256(addr));\n  const merkelTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n\n  return merkelTree.getHexProof(keccak256(claimingAddress));\n};\n","import styled from 'styled-components';\n\nexport const StyledFanzoneClubPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const StyledFanzoneClubFormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding-bottom: 30px;\n  row-gap: 20px;\n  background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0) 0%,\n      rgba(255, 255, 255, 0.08) 107.79%\n    ),\n    rgba(33, 33, 33, 0.6);\n\n  @media ${({ theme }) => theme.screen.xs} {\n    max-width: 500px;\n    margin: 20px auto 0 auto;\n    border-radius: 20px;\n  }\n`;\n\nexport const StyledFanzoneClubCardsImg = styled.img`\n  width: 100%;\n  margin: 0 auto;\n\n  @media ${({ theme }) => theme.screen.xs} {\n    border-radius: 20px 20px 0 0;\n  }\n`;\n\nexport const StyledBalanceLabel = styled.p`\n  color: white;\n  margin: 0 auto;\n  font-size: 18px;\n`;\n\nexport const StyledInputWrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  column-gap: 20px;\n`;\n\nexport const StyledInputLabel = styled.label`\n  color: white;\n  margin: auto 0;\n`;\n\nexport const StyledInput = styled.input`\n  padding: 5px 10px;\n  border-radius: 5px;\n  background: rgba(225, 225, 225, 0.2);\n  color: white;\n`;\n\nexport const StyledBuyClubCardButton = styled.button`\n  border-radius: 5px;\n  background: rgba(255, 129, 1, 1);\n  padding: 5px 10px;\n  margin: 0 auto;\n  color: white;\n  opacity: ${(props) => props.disabled && 0.4};\n`;\n\nexport const StyledErrorMessage = styled.p`\n  color: red;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nexport const StyledTransactionResponseWrapper = styled.div`\n  display: flex;\n`;\n\nexport const StyledBackToBuyButton = styled.button`\n  text-decoration: underline;\n  color: white;\n  margin-right: auto;\n  margin-left: 10px;\n`;\n\nexport const StyledWelcomeTest = styled.h3`\n  font-size: 28px;\n  color: white;\n  text-align: center;\n  font-weight: ${({ theme }) => theme.font.weight.bold};\n`;\n\nexport const StyledOpenSeaLink = styled.a`\n  margin: 0 auto;\n  color: white;\n  text-decoration: underline;\n`;\n\nexport const StyledPolygonScanLink = styled(StyledOpenSeaLink)``;\n","import { FC, useState, useEffect, useCallback, useMemo } from 'react';\nimport { BigNumber, ethers, Signer } from 'ethers';\nimport {\n  useAccount,\n  useConnect,\n  useContract,\n  useNetwork,\n  useSigner,\n} from 'wagmi';\nimport { FanzoneClubCardsImg } from '../../assets';\nimport { FanzoneClubABI } from '../../services/utilities/ABIs/FanzoneClubABI';\nimport { STATUS, isValidConnection } from '../../utility';\nimport { getHexProof } from '../../utility/merkleHash';\nimport {\n  StyledInputLabel,\n  StyledBuyClubCardButton,\n  StyledInputWrapper,\n  StyledErrorMessage,\n  StyledFanzoneClubCardsImg,\n  StyledFanzoneClubPage,\n  StyledFanzoneClubFormContainer,\n  StyledTransactionResponseWrapper,\n  StyledOpenSeaLink,\n  StyledPolygonScanLink,\n  StyledWelcomeTest,\n  StyledBackToBuyButton,\n  StyledBalanceLabel,\n} from './styles';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { StyledLoader, StyledLoadingHolder } from '../AssetDetails/styles';\nimport { useLocation } from 'react-router-dom';\n\nconst FanzoneClub: FC = () => {\n  const location = useLocation();\n  const [\n    validChainIds,\n    expectedChainName,\n    fanzoneClubContractAddress,\n    numbersAfterDecimal,\n  ] = useMemo(() => {\n    if (location.pathname.includes('test')) {\n      return [\n        [137],\n        'Polygon',\n        '0x34c01dD64203b566C4CaE656C832d5a449A34c98',\n        7,\n      ];\n    }\n    return [[1], 'Ethereum', '0x4b406ACb6C43Caf306e4662AAf3a4C8e085e6439', 2];\n  }, [location]);\n\n  const { isConnected } = useAccount();\n  const { chain } = useNetwork();\n  const { data: signer } = useSigner();\n  const { address: account } = useAccount();\n  const fanzoneClubContract = useContract({\n    address: fanzoneClubContractAddress,\n    abi: FanzoneClubABI as {}[],\n    signerOrProvider: signer as Signer,\n  });\n  const [status, setStatus] = useState<STATUS>(STATUS.IDLE);\n  const [transactionResponse, setTransactionResponse] = useState<{\n    tokenIdMinted: number | null;\n    transactionHash: string | null;\n  }>({\n    transactionHash: null,\n    tokenIdMinted: null,\n  });\n  const [formInput, setFormInput] = useState<{\n    maticAmount: BigNumber;\n    amount: number;\n    publicSale: boolean;\n    whiteListSale: boolean;\n    ownedPasses: BigNumber;\n  }>({\n    maticAmount: BigNumber.from(0),\n    amount: 1,\n    publicSale: false,\n    whiteListSale: false,\n    ownedPasses: BigNumber.from(0),\n  });\n  const [error, setError] = useState<string>('');\n\n  const mintFanzoneClubCard = useCallback(async () => {\n    setError('');\n    setStatus(STATUS.LOADING);\n    fanzoneClubContract &&\n      (await fanzoneClubContract\n        .mint(formInput.amount, true, {\n          value: formInput.maticAmount,\n        })\n        .then(async (transaction: TransactionResponse) => {\n          await transaction.wait(1).then((receipt) => {\n            setTransactionResponse({\n              tokenIdMinted: parseInt(receipt.logs[1].topics[3]),\n              transactionHash: receipt.transactionHash,\n            });\n            setStatus(STATUS.SUCCESSFUL);\n          });\n        })\n        .catch((err: any) => {\n          setError(err.data ? err.data.message : err.message);\n          setStatus(STATUS.IDLE);\n        }));\n  }, [fanzoneClubContract, formInput.amount, formInput.maticAmount]);\n\n  const whitelistMint = useCallback(async () => {\n    setError('');\n    setStatus(STATUS.LOADING);\n    if (!account) return;\n    fanzoneClubContract &&\n      (await fanzoneClubContract\n        .whitelistMint(formInput.amount, true, await getHexProof(account), {\n          value: formInput.maticAmount,\n        })\n        .then(async (transaction: TransactionResponse) => {\n          await transaction.wait(1).then((receipt) => {\n            setTransactionResponse({\n              tokenIdMinted: parseInt(receipt.logs[1].topics[3]),\n              transactionHash: receipt.transactionHash,\n            });\n            setStatus(STATUS.SUCCESSFUL);\n          });\n        })\n        .catch((err: any) => {\n          setError(\n            err.reason ? err.reason : err.data ? err.data.message : err.message,\n          );\n          setStatus(STATUS.IDLE);\n        }));\n  }, [fanzoneClubContract, formInput.amount, formInput.maticAmount, account]);\n\n  const validConnection = useMemo(\n    () => isValidConnection(isConnected, chain?.id || 0, validChainIds),\n    [isConnected, chain, validChainIds],\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (!fanzoneClubContract || !validConnection || !account) return;\n      setFormInput({\n        ...formInput,\n        maticAmount: await fanzoneClubContract.price(),\n        publicSale: await fanzoneClubContract.publicSale(),\n        whiteListSale: await fanzoneClubContract.whiteListSale(),\n        ownedPasses: await fanzoneClubContract.balanceOf(account),\n      });\n    })();\n    // Adding formInput to the dependencies array will end up in an infinit loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fanzoneClubContract, validConnection, account]);\n\n  return (\n    <StyledFanzoneClubPage>\n      <StyledFanzoneClubFormContainer>\n        <StyledFanzoneClubCardsImg src={FanzoneClubCardsImg} alt=\"\" />\n        {!isConnected ? (\n          <StyledErrorMessage>\n            Wallet not connected! Please connect via Metamask first\n          </StyledErrorMessage>\n        ) : (\n          !validConnection && (\n            <StyledErrorMessage>\n              Wrong Chain! Please switch to {expectedChainName}\n            </StyledErrorMessage>\n          )\n        )}\n        {error !== '' && <StyledErrorMessage>{error}</StyledErrorMessage>}\n        {status === STATUS.IDLE && (\n          <>\n            <StyledBalanceLabel>\n              Your owned passes: {formInput.ownedPasses.toNumber()}\n            </StyledBalanceLabel>\n            <StyledInputWrapper>\n              <StyledInputLabel>\n                Amount in Ether:{' '}\n                {parseFloat(\n                  ethers.utils.formatEther(formInput.maticAmount),\n                ).toFixed(numbersAfterDecimal)}\n              </StyledInputLabel>\n            </StyledInputWrapper>\n            <StyledInputWrapper>\n              <StyledInputLabel>\n                Amount to mint: {formInput.amount}\n              </StyledInputLabel>\n            </StyledInputWrapper>\n            {(formInput.whiteListSale || formInput.publicSale) && (\n              <StyledBuyClubCardButton\n                disabled={!validConnection}\n                onClick={() =>\n                  formInput.whiteListSale\n                    ? whitelistMint()\n                    : mintFanzoneClubCard()\n                }\n              >\n                {formInput.whiteListSale\n                  ? 'Buy pass now (private sale)'\n                  : 'Buy pass now (public sale)'}\n              </StyledBuyClubCardButton>\n            )}\n          </>\n        )}\n        {status === STATUS.LOADING && (\n          <StyledLoadingHolder>\n            <StyledLoader color=\"#ed7a2d\" />\n          </StyledLoadingHolder>\n        )}\n        {status === STATUS.SUCCESSFUL && (\n          <>\n            <StyledBackToBuyButton onClick={() => setStatus(STATUS.IDLE)}>\n              {'<'}-- Back to buy more\n            </StyledBackToBuyButton>\n            <StyledWelcomeTest>\n              Welcome to the Fanzone Sports Club!\n            </StyledWelcomeTest>\n            <StyledTransactionResponseWrapper>\n              <StyledOpenSeaLink\n                target=\"_blank\"\n                href={`https://opensea.io/assets/${fanzoneClubContractAddress}/${transactionResponse.tokenIdMinted}`}\n              >\n                View pass on OpenSea\n              </StyledOpenSeaLink>\n              <StyledPolygonScanLink\n                target=\"_blank\"\n                href={`https://etherscan.io/tx/${transactionResponse.transactionHash}`}\n              >\n                View tx on etherscan\n              </StyledPolygonScanLink>\n            </StyledTransactionResponseWrapper>\n          </>\n        )}\n      </StyledFanzoneClubFormContainer>\n    </StyledFanzoneClubPage>\n  );\n};\n\nexport default FanzoneClub;\n"],"sourceRoot":""}