{"version":3,"sources":["features/profiles/ProfileCard/ProfileCard.tsx","pages/Profiles/Profiles.tsx"],"names":["ProfileCard","userProfile","balance","type","tooltipId","params","useParams","getTooltipTokenIds","useMemo","ownedAssets","find","asset","assetAddress","toLowerCase","add","to","network","Web3","utils","toChecksumAddress","address","demo","data-tip","tokenIds","data-for","length","src","polygon","alt","makeBlockie","profileImage","name","Profiles","dispatch","useAppDispatch","useState","demoProfiles","setDemoProfiles","setErrorLoadingProfileAddresses","demoAssets","setDemoAssets","setErrorLoadingAssetsAddresses","useEffect","getDefaultAddresses","then","result","error","demoProfilesRange","setDemoProfilesRange","demoAssetsRange","setDemoAssetsRange","fetchAllProfiles","addresses","slice","userProfiles","useSelector","state","selectAllUsersItems","userData","filter","item","some","i","useProfilesState","status","allCollection","selectAllCardItems","fetchAllCards","index","arrayLength","useAssetsState","cards","components","map","nbrOfAllComponents","setComponentsRange","digitalCard"],"mappings":"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","file":"static/js/7.ba588d08.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { IProfile } from '../../../services/models';\nimport polygon from '../../../assets/polygon.svg';\nimport { NetworkName } from '../../../boot/types';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport {\n  StyledBalance,\n  StyledBalanceWrapper,\n  StyledPolygon,\n  StyledProfileBlockie,\n  StyledProfileCard,\n  StyledProfileDetail,\n  StyledProfileDetailWrapper,\n  StyledProfileImg,\n  StyledProfileMedia,\n  StyledProfileName,\n  StyledProfileRole,\n} from './styles';\nimport { useParams } from 'react-router-dom';\nimport Web3 from 'web3';\n\ninterface Iprops {\n  userProfile: IProfile;\n  type: string;\n  balance?: number;\n  tooltipId?: string;\n}\n\ninterface IParams {\n  network: NetworkName;\n  add: string;\n}\n\nexport const ProfileCard: React.FC<Iprops> = ({\n  userProfile,\n  balance,\n  type,\n  tooltipId,\n}: Iprops) => {\n  const params = useParams<IParams>();\n  const getTooltipTokenIds = useMemo(\n    () =>\n      type !== 'demo' &&\n      userProfile.ownedAssets.find(\n        (asset) =>\n          asset.assetAddress.toLowerCase() === params.add.toLowerCase(),\n      ),\n    [params.add, type, userProfile.ownedAssets],\n  );\n\n  return (\n    <StyledProfileCard\n      to={\n        `/${params.network}/profile/` +\n        Web3.utils.toChecksumAddress(userProfile.address)\n      }\n      demo={type === 'demo' ? true : false}\n      data-tip={\n        type !== 'demo' && getTooltipTokenIds && getTooltipTokenIds.tokenIds\n      }\n      data-for={tooltipId}\n    >\n      <StyledBalanceWrapper demo={type === 'demo' ? true : false}>\n        <StyledBalance demo={type === 'demo' ? true : false}>\n          {type === 'demo' ? userProfile.ownedAssets.length : balance}\n        </StyledBalance>\n      </StyledBalanceWrapper>\n      <StyledPolygon\n        src={polygon}\n        alt=\"\"\n        demo={type === 'demo' ? true : false}\n      />\n      <StyledProfileMedia demo={type === 'demo' ? true : false}>\n        <StyledProfileBlockie\n          src={makeBlockie(userProfile.address)}\n          alt=\"\"\n          demo={type === 'demo' ? true : false}\n        />\n        <StyledProfileImg\n          src={userProfile.profileImage}\n          alt=\"\"\n          demo={type === 'demo' ? true : false}\n        />\n      </StyledProfileMedia>\n      <StyledProfileDetailWrapper demo={type === 'demo' ? true : false}>\n        <StyledProfileDetail>\n          <StyledProfileName demo={type === 'demo' ? true : false}>\n            {' '}\n            @{userProfile.name}{' '}\n          </StyledProfileName>\n          <StyledProfileRole>FANZONE user</StyledProfileRole>\n        </StyledProfileDetail>\n      </StyledProfileDetailWrapper>\n    </StyledProfileCard>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ProfileCard } from '../../features/profiles/ProfileCard';\nimport { NetworkName, RootState } from '../../boot/types';\nimport { fetchAllProfiles, selectAllUsersItems } from '../../features/profiles';\nimport { ICard, IProfile } from '../../services/models';\nimport { Pagination } from '../../components';\nimport {\n  StyledContentwrappar,\n  StyledDescription,\n  StyledGreeting,\n  StyledHeroSection,\n  StyledMainContent,\n  StyledDivider,\n  StyledWelcomeHeading,\n  StyledProfilesHeader,\n  StyledProfileHeading,\n} from './styles';\nimport { Search } from '../../components';\nimport { useAppDispatch } from '../../boot/store';\nimport { useParams } from 'react-router-dom';\nimport { getDefaultAddresses } from '../../utility/content/addresses';\nimport { Address } from '../../utils/types';\nimport { fetchAllCards, selectAllCardItems } from '../../features/cards';\nimport { MetaCard } from '../../features/cards/MetaCard';\n\ninterface IParams {\n  network: NetworkName;\n}\n\nconst Profiles: React.FC = () => {\n  const params = useParams<IParams>();\n  const dispatch = useAppDispatch();\n  const [demoProfiles, setDemoProfiles] = useState<Array<Address>>([]);\n  // @TODO: show error message\n  const [errorLoadingProfileAddresses, setErrorLoadingProfileAddresses] =\n    useState();\n  const [demoAssets, setDemoAssets] = useState<Array<Address>>([]);\n  const [errorLoadingAssetsAddresses, setErrorLoadingAssetsAddresses] =\n    useState();\n\n  useEffect(() => {\n    getDefaultAddresses(params.network, 'profileAddresses').then(\n      (result) => {\n        setDemoProfiles(result);\n      },\n      (error) => {\n        setErrorLoadingProfileAddresses(error);\n      },\n    );\n    getDefaultAddresses(params.network, 'assetsAddresses').then(\n      (result) => {\n        setDemoAssets(result);\n      },\n      (error) => {\n        setErrorLoadingAssetsAddresses(error);\n      },\n    );\n    // empty array to only call once\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  const [demoProfilesRange, setDemoProfilesRange] = useState<[number, number]>([\n    0, 9,\n  ]); // load first 11 by default\n  const [demoAssetsRange, setDemoAssetsRange] = useState<[number, number]>([\n    0, 9,\n  ]); // load first 11 by default\n\n  useEffect(() => {\n    if (demoProfiles.length === 0) return;\n    dispatch(\n      fetchAllProfiles({\n        addresses: demoProfiles.slice(\n          demoProfilesRange[0],\n          demoProfilesRange[1] + 1,\n        ),\n        network: params.network,\n      }),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, demoProfiles, params.network, demoProfilesRange]);\n\n  const userProfiles = useSelector(\n    (state: RootState) => selectAllUsersItems(state.userData[params.network]),\n    // eslint-disable-next-line array-callback-return\n  )?.filter((item) => {\n    if (demoProfiles.length > 0) {\n      return demoProfiles?.some(\n        (i) => i === item.address && item.network === params.network,\n      );\n    }\n  });\n\n  const useProfilesState = useSelector(\n    (state: RootState) => state.userData[params.network].status,\n  );\n\n  const allCollection = useSelector(selectAllCardItems).filter((item) =>\n    demoAssets.some((i) => i === item.address),\n  );\n\n  useEffect(() => {\n    if (demoAssets.length === 0) return;\n    dispatch(\n      fetchAllCards({\n        addresses: demoAssets.slice(demoAssetsRange[0], demoAssetsRange[1] + 1),\n        network: params.network,\n        index: demoAssetsRange[0],\n        arrayLength: demoAssets.length,\n      }),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, demoAssets, params.network, demoAssetsRange]);\n\n  const useAssetsState = useSelector((state: RootState) => state.cards.status);\n\n  return (\n    <StyledMainContent>\n      <StyledHeroSection></StyledHeroSection>\n      <StyledContentwrappar>\n        <StyledGreeting>\n          <StyledWelcomeHeading>\n            Welcome on Fanzone Profiles\n          </StyledWelcomeHeading>\n          <StyledDescription>\n            Fanzone Profiles displays any data from the Blockchain which follows\n            the standards of ERC725, LUKSO LSP1-3 and NFTs.\n          </StyledDescription>\n        </StyledGreeting>\n        <StyledDivider></StyledDivider>\n        <>\n          <StyledProfilesHeader>\n            <StyledProfileHeading>Profiles</StyledProfileHeading>\n            <Search />\n          </StyledProfilesHeader>\n          <Pagination\n            status={useProfilesState}\n            components={userProfiles.map((userProfile: IProfile) => (\n              <ProfileCard\n                key={userProfile.address}\n                userProfile={userProfile}\n                type=\"demo\"\n              />\n            ))}\n            nbrOfAllComponents={demoProfiles.length}\n            setComponentsRange={setDemoProfilesRange}\n          />\n          {/* <Pagination type=\"demo\" collectionAddresses={demoAssets} /> */}\n          <StyledProfilesHeader>\n            <StyledProfileHeading>Assets</StyledProfileHeading>\n            <Search />\n          </StyledProfilesHeader>\n          <Pagination\n            status={useAssetsState}\n            components={allCollection.map((digitalCard: ICard) => {\n              return (\n                <MetaCard\n                  key={digitalCard.address}\n                  digitalCard={digitalCard}\n                  type=\"demo\"\n                />\n              );\n            })}\n            nbrOfAllComponents={demoAssets.length}\n            setComponentsRange={setDemoAssetsRange}\n          />\n        </>\n      </StyledContentwrappar>\n    </StyledMainContent>\n  );\n};\n\nexport default Profiles;\n"],"sourceRoot":""}